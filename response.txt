[
  {
    "type_of": "article",
    "id": 441814,
    "title": "Persistent REST API with json-server and Glitch",
    "description": "This is the easiest way I know to get a public persistent REST API up and running in under 1 minute, without writing any code.",
    "published": true,
    "published_at": "2020-08-31T07:22:25.973Z",
    "slug": "persistent-rest-api-with-json-server-and-glitch-32kc",
    "path": "/juliang/persistent-rest-api-with-json-server-and-glitch-32kc",
    "url": "https://dev.to/juliang/persistent-rest-api-with-json-server-and-glitch-32kc",
    "comments_count": 1,
    "public_reactions_count": 6,
    "page_views_count": 81,
    "published_timestamp": "2020-08-31T07:22:25Z",
    "body_markdown": "---\ntitle: Persistent REST API with json-server and Glitch\npublished: true\ndescription: This is the easiest way I know to get a public persistent REST API up and running in under 1 minute, without writing any code.\ncanonical_url: https://juliangaramendy.dev/json-server-glitch\ntags: rest, json, glitch, javascript\ncover_image: https://dev-to-uploads.s3.amazonaws.com/i/j16sy1p2gujx1ckleb6k.jpg\n---\n\nThis is the easiest way I know to get a public persistent REST API up and running in under 1 minute, without writing any code.\n\nWe'll be using [json-server](https://github.com/typicode/json-server) by [tipicode](https://github.com/typicode) hosted on [Glitch](https://glitch.com/).\n\n### Step 1: Clone/Remix the demo project\nHead over to [Glitch.com](https://glitch.com) and \"remix\" my [json-server-demo](https://glitch.com/edit/#!/json-server-demo?path=README.md%3A1%3A0).\n\n### Step 2: Use your own data\n\nYou can change **db.json** with your own json \"database\".\n\nThe one in the demo looks like this:\n\n```json\n{\n  \"games\": [\n    {\n      \"id\": 1,\n      \"title\": \"Frogger\",\n      \"year\": 1981\n\t  ...\n    },\n\t...\n  ]\n}\n```\n\n### Step 3: That's it!\n\nWhile on the Glitch project, click on \"Show in a new window\", and you'll see the URL/endpoint of **your** REST API.\n\nIn the demo's db.json file, ``\"games\"`` becomes an entity that you can access like this:\n\n```\nGET    https://json-server-demo.glitch.me/games\nPOST   https://json-server-demo.glitch.me/games\nPATCH  https://json-server-demo.glitch.me/games/1\nDELETE https://json-server-demo.glitch.me/games/1\n```\n\n### How it works\n\nGlitch projects can run Node.js, but in our case we don't need to write a single line of code. We simply declare our dependency to json-server and our \"start\" script in  the **package.json** file:\n\n```json\n{\n  ...\n  \"scripts\": {\n    \"start\": \"json-server --watch ./db.json\"\n  },\n  \"dependencies\": {\n    \"json-server\": \"^0.16.1\"\n  },\n  ...\n}\n```\n\nBy default json-server reads and writes to the db.json file, so all changes made by POST, PATCH, PUT, DELETE http methods are persisted in \"disk\" in the Glitch project. See [Do you have built-in persistence or a database?](https://glitch.happyfox.com/kb/article/22-do-you-have-built-in-persistence-or-a-database/) in the FAQ.\n\n**The answer is YES!**\n\n\u003e This means you can: Use files as a flat file database\n\n### Warning: Glitch Restrictions\nGlitch \"projects\" seem to take some time to warm up or wake up, and the go back to sleep after a period of inactivity. For this reason I think this quick setup is good for demos or workshops, but not for production.\n\nPlease refer to the links below for more information:\n\n- [Glitch Technical Restrictions](https://glitch.happyfox.com/kb/article/17-what-are-the-technical-restrictions-for-glitch-projects/)\n- [Glitch Project Hours](https://glitch.happyfox.com/kb/article/83-what%E2%80%99s-the-deal-with-project-hours/)\n\n----\nPhoto by [coniferconifer](https://www.flickr.com/people/7656600@N06) on [Wikimedia Commons](https://commons.wikimedia.org/wiki/Category:Koinobori#/media/File:Koinobori_celebrates_coming_Kid's_day_(14030748811).jpg)\n",
    "positive_reactions_count": 6,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--ZYkHBUgX--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/j16sy1p2gujx1ckleb6k.jpg",
    "tag_list": [
      "rest",
      "json",
      "glitch",
      "javascript"
    ],
    "canonical_url": "https://juliangaramendy.dev/json-server-glitch",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 427802,
    "title": "Why I never use React.useContext",
    "description": "Instead of using React.createContext directly, we can use a utility function to ensure the component...",
    "published": true,
    "published_at": "2020-08-17T17:57:36.727Z",
    "slug": "why-i-never-use-react-usecontext-4ddf",
    "path": "/juliang/why-i-never-use-react-usecontext-4ddf",
    "url": "https://dev.to/juliang/why-i-never-use-react-usecontext-4ddf",
    "comments_count": 2,
    "public_reactions_count": 8,
    "page_views_count": 455,
    "published_timestamp": "2020-08-17T17:57:36Z",
    "body_markdown": "---\ntitle: Why I never use React.useContext\npublished: true\ndescription: \ntags: react, JavaScript, typescript\ncanonical_url: https://juliangaramendy.dev/strict-react-context/\n---\n\nInstead of using `React.createContext` directly, we can use a utility function to ensure the component calling `useContext` is rendered within the correct Context Provider.\n\n```ts\n// JavaScript:\nconst [BananaProvider, useBanana] = createStrictContext()\n\n// TypeScript:\nconst [BananaProvider, useBanana] = createStrictContext\u003cBanana\u003e()\n```\n\nScroll down for the code, or find it in this [gist](https://gist.github.com/JulianG/9aa3e0d299e0eb35637cd9d69540d4f9).\n\n## The Problem\n\nWe would normally create a React Context like this:\n\n```ts\nconst BananaContext = React.createContext()\n\n// ... later ...\n\nconst banana = React.useContext(BananaContext) // banana may be undefined\n```\n\nOur `banana` will be `undefined` if our component doesn't have a `BananaContext.Provider` up in the tree.\n\nThis has some drawbacks:\n\n- Our component needs to check for `undefined`, or risk a run-time error at some point.\n- If `banana` is some data we need to render, we now need to render **something else** when it's `undefined`.\n- Basically, we cannot consider our `banana` an invariant within our component.\n\n## Adding a custom hook\n\nI learned this from a [blog post by Kent C. Dodds](https://kentcdodds.com/blog/how-to-use-react-context-effectively).\n\nWe can create a custom `useBanana` hook that asserts that the context is not undefined:\n\n```ts\nexport function useBanana() {\n  const context = React.useContext(BananaContext)\n  if(context === undefined) {\n    throw new Error('The useBanana hook must be used within a BananaContext.Provider')\n  return context\n}\n```\n\nIf we use this, and never directly consume the `BananaContext` with `useContext(BananaContext)`, we can ensure `banana` isn't `undefined`, because it if was, we would throw with the error message above.\n\nWe can make this even \"safer\" by never exporting the `BananaContext`. Exporting only its provider, like this:\n\n```ts\nexport const BananaProvider = BananaContext.Provider\n```\n\n## A generic solution\n\nI used the previous approach for several months; writing a custom hook for each context in my app.\n\nUntil one day, I was looking through the source code of [Chakra UI](https://github.com/chakra-ui/chakra-ui/), and they have a [utility function](https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27) that is much better.\n\nThis is my version of it:\n\n```js\nimport React from 'react'\n\nexport function createStrictContext(options = {}) {\n  const Context = React.createContext(undefined)\n  Context.displayName = options.name // for DevTools\n\n  function useContext() {\n    const context = React.useContext(Context)\n    if (context === undefined) {\n      throw new Error(\n        options.errorMessage || `${name || ''} Context Provider is missing`\n      )\n    }\n    return context\n  }\n\n  return [Context.Provider, useContext]\n}\n```\n\nThis function returns a tuple with a provider and a custom hook. It's impossible to leak the Context, and therefore impossible to consume it directly, skipping the assertion.\n\nWe use it like this:\n\n```ts\nconst [BananaProvider, useBanana] = createStrictContext()\n```\n\nHere's the TypeScript version:\n\n```ts\nimport React from 'react'\n\nexport function createStrictContext\u003cT\u003e(\n  options: {\n    errorMessage?: string\n    name?: string\n  } = {}\n) {\n  const Context = React.createContext\u003cT | undefined\u003e(undefined)\n  Context.displayName = options.name // for DevTools\n\n  function useContext() {\n    const context = React.useContext(Context)\n    if (context === undefined) {\n      throw new Error(\n        options.errorMessage || `${name || ''} Context Provider is missing`\n      )\n    }\n    return context\n  }\n\n  return [Context.Provider, useContext] as [React.Provider\u003cT\u003e, () =\u003e T]\n}\n```\n\nWe use it like this:\n\n```ts\nconst [BananaProvider, useBanana] = createStrictContext\u003cBanana\u003e()\n```\n\n## Conclusion\n\nWe can make errors appear earlier (unfortunatelly still at runtime) when we render a component outside the required Context Provider by using a custom hook that throws when the context is undefined.\n\nInstead of using React.createContext directly, we use a utility function to create providers and hooks automatically for all the contexts in our app.\n\n\n### Comments?\n\n- Do you use a similar \"pattern\"? No? Why not?\n- In which cases would you NOT use something like this? \n\n----\n\n### References:\n\n- [How to use React Context effectively](https://kentcdodds.com/blog/how-to-use-react-context-effectively) by Kent C. Dodds\n- [Original utility function](https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27) in the Chakra UI repo.\n- [Gist with both JS and TS versions of the function](https://gist.github.com/JulianG/9aa3e0d299e0eb35637cd9d69540d4f9)\n- [React Context Documentation](https://reactjs.org/docs/context.html#reactcreatecontext)\n\n----\n\nPhoto by [Engjell Gjepali](https://unsplash.com/@iamengjell?utm_source=unsplash\u0026amp;utm_medium=referral\u0026amp;utm_content=creditCopyText) on [Unsplash](https://unsplash.com/)",
    "positive_reactions_count": 8,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--ZgO58tdk--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/thx73r8ewmctu2xfps48.jpg",
    "tag_list": [
      "react",
      "javascript",
      "typescript"
    ],
    "canonical_url": "https://juliangaramendy.dev/strict-react-context/",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 414806,
    "title": "React State Management in 2020",
    "description": "Here's what I do for medium-sized CRUD-like single-page React applications.",
    "published": true,
    "published_at": "2020-08-01T11:46:50.534Z",
    "slug": "react-state-management-in-2020-3c58",
    "path": "/juliang/react-state-management-in-2020-3c58",
    "url": "https://dev.to/juliang/react-state-management-in-2020-3c58",
    "comments_count": 8,
    "public_reactions_count": 200,
    "page_views_count": 8640,
    "published_timestamp": "2020-08-01T11:46:50Z",
    "body_markdown": "---\ntitle: React State Management in 2020\npublished: true\ndescription: Here's what I do for medium-sized CRUD-like single-page React applications.\ncanonical_url: https://juliangaramendy.dev/react-state-management-2020/\ntags: react\ncover_image: https://images.unsplash.com/photo-1520408222757-6f9f95d87d5d?ixlib=rb-1.2.1\u0026ixid=eyJhcHBfaWQiOjEyMDd9\u0026auto=format\u0026fit=crop\u0026w=1486\u0026q=80\n---\n\nEvery now and then I see a tweet poll asking what we do for state management in React. In many cases  the options are constrained to Redux, MobX and more recently React Context + Hooks.\n\nOf course the only correct answer is **it depends**.\n\nBut here's what I do for medium-sized [CRUD](https://en.wikipedia.org/wiki/Create%2C_read%2C_update_and_delete)-like single-page React applications.\n\n - I don't use any state-management library. (no Redux, no MobX, no Recoil).\n - I try to manage most of the application state with routes. This means having different URLs for different parts of the application, even if it's a single-page application. I use React Router for this.\n - **I differentiate between application/UI state and remote data cache.** and use [SWR](https://swr.vercel.app/) or [React Query](https://react-query.tanstack.com/) to keep a cache of remote data.\n - The rest tends to be small UI state \"details\" such as which modal popup is open, or the state of a form before submitting it. For this, I prefer to use `useState` or `useReducer` hooks, keeping state close to where it's used.\n\n### Application state in the URL\n\nThe application state must be kept **somewhere**. I can keep it hidden away in memory or I can expose it in the URL, so our users (and developers) can benefit from it.\n - **Better UX**: users can bookmark and share links and search results with others\n - **Better DX**: developers don't need to click around to get the app to a certain state every time they refresh the browser.\n - **Better documentation**: Help pages can point the user to the exact part of the application they describe.\n\n**I try to keep most of the application state in the URL, and I use React Router to handle the routes.**\n\n### Remote Data is not state: it belongs in a cache\n\n**I cannot stress this enough.** Fortunately other people can explain this better than me:\n\n\u003e UI state should be separate from the server cache (often called \"state\" as well), and when you do that, you don't need anything more than React for state management.\n\u003e [Kent C. Dodds](https://twitter.com/kentcdodds/status/1198616792177889280)\n\n\nHere's an excellent article: [Why You Should Be Storing Remote Data in a Cache (and Not in State)](https://medium.com/better-programming/why-you-should-be-separating-your-server-cache-from-your-ui-state-1585a9ae8336) by Jason Ankers.\n\n \u003e \"Remote data is read-only. It doesn’t belong in the same location as our UI state.\"\n\nIn [CRUD](https://en.wikipedia.org/wiki/Create%2C_read%2C_update_and_delete)-like web applications, where the server is authoritative, I don't want the client-side copy of the data to become stale.\n\nConsidering all this, in most cases I don't need to customise the way remote data is fetched and stored. I can delegate all that to a library like [SWR](https://swr.vercel.app/) or [React Query](https://react-query.tanstack.com/). \n\nThese libraries store the fetched data in a static cache; and there’s no need to resort to React Context to \"share\" the data with other components because all components consuming the same data are automatically rerendered when the cache changes.\n\nAt work, earlier this year we refactored one of our SPAs to use SWR and the result was a much simpler application logic. In addition, we now benefit from all the nice features that come with SWR such as “focus revalidation” and “refetch on interval”. The app has been up and running for months and we haven't experienced any issues.\n\n### Local UI state should be co-located\n\nAlmost everything that isn't caught by the above cases is local UI state such as the visibility of modal dialogs or the fields in a form before it's submitted.\n\nFor these cases I prefer to keep the state [close to where it's used]((https://kentcdodds.com/blog/colocation)). I usually find myself using `useState` and occasionally `useReducer`.\n\n### Comments?\n\nI would love to hear your thoughts.\n\n - What do **you** do for state management?\n - Can you think of a common case that is not covered here?\n\n### References:\n\n - [SWR](https://swr.vercel.app/) by Vercel.\n - [React Query](https://react-query.tanstack.com/) by Tanner Linsley. \n - [Why You Should Be Storing Remote Data in a Cache (and Not in State)](https://medium.com/better-programming/why-you-should-be-separating-your-server-cache-from-your-ui-state-1585a9ae8336) by Jason Ankers.\n - [State Management with React](https://kentcdodds.com/blog/application-state-management-with-react) by Kent C. Dodds.\n - [Lifting State Up](https://reactjs.org/docs/lifting-state-up.html). React Blog.\n - [Colocation](https://kentcdodds.com/blog/colocation) by Kent C. Dodds.\n - I first learned about [SWR](https://swr.now.sh/) thanks to a video tutorial by Leigh Halliday: \"[React Data Fetching with Hooks using SWR](https://youtu.be/oWVW8IqpQ-A)\".\n\n\n----\n\nCover photo by \u003ca href=\"https://unsplash.com/@thebloomintale?utm_source=unsplash\u0026amp;utm_medium=referral\u0026amp;utm_content=creditCopyText\"\u003eOshin Khandelwal\u003c/a\u003e on \u003ca href=\"https://unsplash.com/?utm_source=unsplash\u0026amp;utm_medium=referral\u0026amp;utm_content=creditCopyText\"\u003eUnsplash\u003c/a\u003e\u003c/span\u003e",
    "positive_reactions_count": 200,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--mAsBr5o2--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://images.unsplash.com/photo-1520408222757-6f9f95d87d5d%3Fixlib%3Drb-1.2.1%26ixid%3DeyJhcHBfaWQiOjEyMDd9%26auto%3Dformat%26fit%3Dcrop%26w%3D1486%26q%3D80",
    "tag_list": [
      "react"
    ],
    "canonical_url": "https://juliangaramendy.dev/react-state-management-2020/",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 319196,
    "title": "What Westworld and React Hooks have in common",
    "description": "⚠️ Spoiler alert! If you haven't watched Westworld perhaps you may want to skip this post.  In the fi...",
    "published": true,
    "published_at": "2020-04-26T07:50:13.701Z",
    "slug": "what-westworld-and-react-hooks-have-in-common-5c2m",
    "path": "/juliang/what-westworld-and-react-hooks-have-in-common-5c2m",
    "url": "https://dev.to/juliang/what-westworld-and-react-hooks-have-in-common-5c2m",
    "comments_count": 0,
    "public_reactions_count": 9,
    "page_views_count": 257,
    "published_timestamp": "2020-04-26T07:50:13Z",
    "body_markdown": "⚠️ **Spoiler alert!** If you haven't watched [Westworld](https://en.wikipedia.org/wiki/Westworld_(TV_series)) perhaps you may want to skip this post.\n\nIn the first season of Westworld androids are reset and their memories erased every time they \"die\" or after each \"narrative cycle\". Androids cannot take their memories with them (nor learn from them) for the next cycle. **In a way they're stateless.**\n\n![Maeve](https://dev-to-uploads.s3.amazonaws.com/i/l4ahfmi6lf7n7zec6fj9.png)\n\nOn episode 4 Maeve seems to malfunction and has memories from when the scientists fix her wounds and reset her every time. But this only lasts for one cycle and then she forgets again.\n\nOne day, after a daydreaming episode she draws her vision (a man in a hazmat suit) on a piece of paper and starts wondering where to keep the drawing. She suspects everything in her room is carefully reset every time.\n\n![Maeve lifts the floorboard](https://dev-to-uploads.s3.amazonaws.com/i/i8uiqlju2ppxnm7aoran.png)\n\nShe decides to hide the piece of paper under a loose floorboard. When she lifts the board she finds a lot of similar drawings that had been stored in there before.\n\n![Maeve finds other drawings](https://dev-to-uploads.s3.amazonaws.com/i/7nsh02zxy45kje7ndrrl.png)\n\n**That's basically React.useState.**\n\nImagine a component with a text input. The user enters some data, but this is a pure function! where do we keep this data for the next time the function is run? \n\n**Under a floorboard.**\n\n```js\nconst [drawings, setDrawings] = useFloorboard()\n```\n",
    "positive_reactions_count": 9,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--yIFT1Myd--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/bnx4n0wvzclge4qo68p8.jpeg",
    "tag_list": [
      "react"
    ],
    "canonical_url": "https://dev.to/juliang/what-westworld-and-react-hooks-have-in-common-5c2m",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 268734,
    "title": "Managing Remote Data with SWR",
    "description": "In this series, instead of using a state-management library or proposing a one-size-fits-all solution...",
    "published": true,
    "published_at": "2020-02-27T21:29:58.168Z",
    "slug": "managing-remote-data-with-swr-7cf",
    "path": "/juliang/managing-remote-data-with-swr-7cf",
    "url": "https://dev.to/juliang/managing-remote-data-with-swr-7cf",
    "comments_count": 0,
    "public_reactions_count": 20,
    "page_views_count": 2900,
    "published_timestamp": "2020-02-27T21:29:58Z",
    "body_markdown": "\n**In this series, instead of using a state-management library or proposing a one-size-fits-all solution, we start from the bare minimum and we build up our state management as we need it.**\n\n----\n\n* In the first article we described how we [load and display data with hooks](https://dev.to/juliang/loading-and-displaying-data-with-hooks-jlj).  \n* In the second article we learned how to [change remote data with hooks](https://dev.to/juliang/changing-remote-data-with-hooks-565p).\n* In the third article we learned [how to share data between components with React Context](https://dev.to/juliang/sharing-remote-data-with-react-context-3859), without using globals, singletons or resorting to state management libraries like MobX or Redux.\n* **In this fourth article we'll see how to share data between using [SWR](https://swr.now.sh/)**, which is probably what we should have done from the beginning.\n\n\nIn the previous articles we were storing the loaded data within React, in a `useState` hook. But since then SWR was released (Oct 2019).\n\nI first learned about SWR thanks to a video tutorial by Leigh Halliday: \"[React Data Fetching with Hooks using SWR](https://youtu.be/oWVW8IqpQ-A)\", and I thought it was interesting enough that I could try it on a small internal project at work.\n\nBut a few weeks later [a Twitter thread](https://twitter.com/giuseppegurgone/status/1200381565773262851) took me to [this article](https://medium.com/better-programming/why-you-should-be-separating-your-server-cache-from-your-ui-state-1585a9ae8336); something clicked in my head and I realised I wasn't just looking for an excuse to try SWR. \n\n**No. I had been doing it wrong all along!**\n\n![The Scream, by Edvard Munch - National Gallery of Norway](https://dev-to-uploads.s3.amazonaws.com/i/h31fdb9j8n44hhrzdst0.jpg)\n\nI was storing my remotely fetched data in `useReducer` or `useState` and manually mutating (or via a reducer), and then **maybe reloading** from the server in some cases, but not in others. And I was using React Context to make the data available to unrelated components in my app.\n\n**SWR makes this easier and better.**\n\nSWR stores the fetched data in a static cache. Therefore there's no need to use React Context to share the data with other components. And all components fetching the same data are updated when the data changes.\n\nI refactored my SPA to use SWR and that resulted in a much simpler application logic. In addition, we now benefit from all the nice features that come with SWR such as \"focus revalidation\" and \"refetch on interval\".\n\n**Let's refactor our example from the previous three articles to use SWR.**\n\n## Before SWR\n\nOur demo app before SWR is what we got after our [third article](https://dev.to/juliang/sharing-remote-data-with-react-context-3859). (*[see repo](https://github.com/JulianG/minimal-state-management-demo/blob/12-before-swr/src)*)\n\n## Install SWR\n\n```bash\nyarn add swr\n```\n\n## Refactoring our custom hook\n\nIn our demo app we have a custom `useFetchedGames` hook that loads the games using the `useAsyncFunction` hook, and then stores them using `useState` to provida a way to locally mutate the data.\n\n```ts\nconst useFetchedGames = () =\u003e {\n  const [fetchedGames, error, isPending] = useAsyncFunction(getGames, emptyList);\n\n  const [games, setGames] = React.useState(emptyList);\n  React.useEffect(() =\u003e {\n    setGames(fetchedGames);\n  }, [fetchedGames]);\n\n  return { games, setGames, error, isPending };\n};\n```\n\nThe problem with this approach is:\n\n1. The list of games is stored twice: first in a `useState` hook inside `useAsyncFunction`, and then in a new `useState` hook.\n2. If the list of games is updated on the server, we never reload it. Here's where SWR shines.\n\nWe're going to refactor `useFetchedGames` to use SWR instead of `useState`.\n\n```ts\nconst useFetchedGames = () =\u003e {\n  const { data, error, mutate } = useSWR('getGames', getGames); \n\n  const games = data || []\n  const isPending = !data\n  const setGames = mutate\n\n  return { games, setGames, error, isPending };\n};\n```\n\nThe full diff can be found in [this git commit](https://github.com/JulianG/minimal-state-management-demo/commit/4b2f4c5a6ff01b6618e653fe0eb637bcda81cf1c).\n\nNote the `\"getGames\"` string literal, just before the `getGames` function. This is a **key** to help SWR identify our request. In our case it can be anything as long as it is unique for this resource (the list of games). There's a even simpler way. You can [find it in the docs](https://swr.now.sh/#basic-data-loading).\n\n## Removing React Context\n\nNow that we're using `useSWR` we don't need a React context, its provider, nor the `useContext` hook.\n\nIn the demo project we make our components consume the `useGames` hook directly, instead of the `useGamesContext` one.\n\nFor example, **GameGrid.tsx**:\n\n```diff\n- import { useGamesContext } from '../GamesContext';\n+ import { useGames } from '../useGames';\n\n  export const GameGrid = () =\u003e {\n-   const { games, error, isPending, markAsFinished } = useGamesContext();\n+   const { games, error, isPending, markAsFinished } = useGames();\n\n    return (\n      \u003cdiv className=\"gamegrid\"\u003e\n```\n\nYou can see the complete diff in [this git commit](https://github.com/JulianG/minimal-state-management-demo/commit/9a7e8eb52d6482858655dc3195ef05f9f4daf5a7).\n\n## Conclusion\n\nWith this small refactoring, our app has less code to maintain and we benefit from other great SWR features:\n\n* Revalidate on focus.\n* Revalidate on interval. (optional)\n* Revalidate on reconnect.\n* Retry on error.\n\nI think Zeit's [SWR](https://swr.now.sh/) (or a similar library) is a much better solution than storing fetched data in a React component using `useState` or `useReducer`.\n\nI continue to store my application's UI state using custom hooks that use `useReducer` and `useState` but for remote data, I prefer to store it in a cache.\n\nPlease let me know what you think in the comments below.\n",
    "positive_reactions_count": 20,
    "cover_image": null,
    "tag_list": [
      "react",
      "typescript",
      "javascript",
      "swr"
    ],
    "canonical_url": "https://dev.to/juliang/managing-remote-data-with-swr-7cf",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 267700,
    "title": "How SWR works behind the scenes",
    "description": "I first learned about SWR thanks to a video tutorial by Leigh Halliday: \"React Data Fetching with Hoo...",
    "published": true,
    "published_at": "2020-02-24T21:58:28.457Z",
    "slug": "how-swr-works-4lkb",
    "path": "/juliang/how-swr-works-4lkb",
    "url": "https://dev.to/juliang/how-swr-works-4lkb",
    "comments_count": 5,
    "public_reactions_count": 221,
    "page_views_count": 6080,
    "published_timestamp": "2020-02-24T21:58:28Z",
    "body_markdown": "I first learned about [SWR](https://swr.now.sh/) thanks to a video tutorial by Leigh Halliday: \"[React Data Fetching with Hooks using SWR](https://youtu.be/oWVW8IqpQ-A)\". If you're not familiar with SWR, you can watch Leigh's video, [read the official docs](https://swr.now.sh/) or [find more on dev.to](https://dev.to/t/swr).\n\nIn this post we're going to build our own version of SWR, if only to understand how it works. But first a disclaimer:\n\n| ⚠️ Warning!     |\n|----------------|\n| **This is is not production code.** It's a simplified implementation and it doesn't include all the great features of [SWR](https://swr.now.sh/). |\n\nIn previous blog posts I had written a `useAsyncFunction` hook to fetch data in React function components. That hook works not only with `fetch`, but with any function returning a promise.\n\nHere's the hook:\n```ts\ntype State\u003cT\u003e = { data?: T; error?: string }\n\nexport function useAsyncFunction\u003cT\u003e(asyncFunction: () =\u003e Promise\u003cT\u003e): State\u003cT\u003e {\n  const [state, setState] = React.useState\u003cState\u003cT\u003e\u003e({})\n\n  React.useEffect(() =\u003e {\n    asyncFunction()\n      .then(data =\u003e setState({ data, error: undefined }))\n      .catch(error =\u003e setState({ data: undefined, error: error.toString() }))\n  }, [asyncFunction])\n\n  return state\n}\n```\n\nIf we pretend the `fetchAllGames` is a function returning a promise, here's how we use the hook:\n```ts\nfunction MyComponent() {\n  const { data, error } = useAsyncFunction(fetchAllGames)\n  // ...\n}\n```\n\nSWR has a similar API, so let's start from this hook, and make changes as needed.\n\n### Changing data store\n\nInstead of storing the data in `React.useState` we can store it in a static variable in the module scope, then we can remove the `data` property from our state:\n\n```ts\nconst cache: Map\u003cstring, unknown\u003e = new Map()\n\ntype State\u003cT\u003e = { error?: string }\n```\n\nOur cache is a `Map` because otherwise different consumers of the  hook would overwrite the cache with their unrelated data.\n\nThis means we need to add a `key` parameter to the hook:\n\n```ts\nexport function useAsyncFunction\u003cT\u003e(key: string, asyncFunction: () =\u003e Promise\u003cT\u003e) {\n  ...\n}\n```\n\nNext, we change what happens when the promise resolves:\n\n```ts\nasyncFunction()\n  .then(data =\u003e {\n    cache.set(key, data) // \u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c setting cache here!\n    setState({ error: undefined })\n  })\n  .catch(error =\u003e {\n    setState({ error: error.toString() })\n  })\n```\n\nNow our \"state\" is just the error, so we can simplify it. The custom hook now looks like this:\n\n```ts\nconst cache: Map\u003cstring, unknown\u003e = new Map()\n\nexport function useAsyncFunction\u003cT\u003e(\n  key: string,\n  asyncFunction: () =\u003e Promise\u003cT\u003e\n) {\n  const [error, setError] = React.useState\u003cstring | undefined\u003e(undefined)\n\n  React.useEffect(() =\u003e {\n    asyncFunction()\n      .then(data =\u003e {\n        cache.set(key, data)\n        setError(undefined)\n      })\n      .catch(error =\u003e setError(error.toString()))\n  }, [key, asyncFunction])\n\n  const data = cache.get(key) as T | undefined\n  return { data, error }\n}\n```\n\n### Mutating local data\n\nThis works but it doesn't provide a mechanism to mutate the local data, or to reload it.\n\nWe can create a \"mutate\" method that will update the data in the cache, and we can expose it by adding it to the return object. We want to memoise it so that the function reference doesn't change on every render. ([React docs on useCallback](https://reactjs.org/docs/hooks-reference.html#usecallback)):\n\n```ts\n  ...\n  const mutate = React.useCallback(\n    (data: T) =\u003e void cache.set(key, data),\n    [key]\n  );\n  return { data, error, mutate };\n}\n```\n\nNext, in order to provide a \"reload\" function we extract the existing \"load\" implementation which is currently inside our `useEffect`'s anonymous function:\n\n```ts\nReact.useEffect(() =\u003e {\n  asyncFunction()\n    .then(data =\u003e {\n      cache.set(key, data)\n      setError(undefined)\n    })\n    .catch(error =\u003e setError(error.toString()))\n}, [key, asyncFunction])\n```\n\nAgain, we need to wrap the function in `useCallback`. ([React docs on useCallback](https://reactjs.org/docs/hooks-reference.html#usecallback)):\n\n```ts\nconst load = React.useCallback(() =\u003e {\n  asyncFunction()\n    .then(data =\u003e {\n      mutate(data); // \u003c\u003c\u003c\u003c\u003c\u003c\u003c we call `mutate` instead of `cache.set`\n      setError(undefined);\n    })\n    .catch(error =\u003e setError(error.toString()));\n}, [asyncFunction, mutate]);\n\nReact.useEffect(load, [load]); // executes when the components mounts, and when props change\n\n...\n\nreturn { data, error, mutate, reload: load };\n```\n\n### Almost there\n\nThe entire module now looks like this: (⚠️ but it doesn't work)\n\n```ts\nconst cache: Map\u003cstring, unknown\u003e = new Map()\n\nexport function useAsyncFunction\u003cT\u003e(\n  key: string,\n  asyncFunction: () =\u003e Promise\u003cT\u003e\n) {\n  const [error, setError] = React.useState\u003cstring | undefined\u003e(undefined)\n\n  const mutate = React.useCallback(\n    (data: T) =\u003e void cache.set(key, data),\n    [key]\n  );\n\n  const load = React.useCallback(() =\u003e {\n    asyncFunction()\n      .then(data =\u003e {\n        mutate(data) \n        setError(undefined)\n      })\n      .catch(error =\u003e setError(error.toString()))\n  }, [asyncFunction, mutate])\n\n  React.useEffect(load, [load])\n\n  const data = cache.get(key) as T | undefined\n  return { data, error, mutate, reload: load }\n}\n```\n\n⚠️ This doesn't work because the first time this executes, `data` is undefined. After that, the promise resolves and the `cache` is updated, but since we're not using `useState`, React doesn't re-render the component.\n\n### Shamelessly force-updating\n\nHere's a quick hook to force-update our component.\n\n```ts\nfunction useForceUpdate() {\n  const [, setState] = React.useState\u003cnumber[]\u003e([])\n  return React.useCallback(() =\u003e setState([]), [setState])\n}\n```\n\nWe use it like this:\n\n```ts\n...\nconst forceUpdate = useForceUpdate();\n\nconst mutate = React.useCallback(\n  (data: T) =\u003e {\n    cache.set(key, data);\n    forceUpdate(); // \u003c\u003c\u003c\u003c\u003c\u003c\u003c calling forceUpdate after setting the cache!\n  },\n  [key, forceUpdate]\n);\n...\n```\n\n✅ **And now it works!** When the promise resolves and the cache is set, the component is force-updated and finally `data` points to the value in cache.\n\n```ts\nconst data = cache.get(key) as T | undefined\nreturn { data, error, mutate, reload: load }\n```\n\n### Notifying other components\n\n**This works, but is not good enough.**\n\nWhen more than one React component use this hook, only the one that loads first, or the one that mutates local data gets re-rendered. **The other components are not notified of any changes.**\n\nOne of the benefits of SWR is that we don't need to setup a React Context to share the loaded data. **How can we achieve this functionality?**\n\n### Subscribing to cache updates\n\nWe move the `cache` object to a separate file because it will grow in complexity.\n\n```ts\nconst cache: Map\u003cstring, unknown\u003e = new Map();\nconst subscribers: Map\u003cstring, Function[]\u003e = new Map();\n\nexport function getCache(key: string): unknown {\n  return cache.get(key);\n}\nexport function setCache(key: string, value: unknown) {\n  cache.set(key, value);\n  getSubscribers(key).forEach(cb =\u003e cb());\n}\n\nexport function subscribe(key: string, callback: Function) {\n  getSubscribers(key).push(callback);\n}\n\nexport function unsubscribe(key: string, callback: Function) {\n  const subs = getSubscribers(key);\n  const index = subs.indexOf(callback);\n  if (index \u003e= 0) {\n    subs.splice(index, 1);\n  }\n}\n\nfunction getSubscribers(key: string) {\n  if (!subscribers.has(key)) subscribers.set(key, []);\n  return subscribers.get(key)!;\n}\n\n```\n\nNote that we're not exporting the `cache` object directly anymore. In its place we have the `getCache` and `setCache` functions. But more importantly, we also export the `subscribe` and `unsubscribe` functions. These are for our components to subscribe to changes even if those were not initiated by them.\n\nLet's update our custom hook to use these functions. First:\n\n```diff\n-cache.set(key, data);\n+setCache(key, data);\n...\n-const data = cache.get(key) as T | undefined;\n+const data = getCache(key) as T | undefined;\n```\n\nThen, in order to subscribe to changes we need a new `useEffect`:\n\n```ts\nReact.useEffect(() =\u003e{\n  subscribe(key, forceUpdate);\n  return () =\u003e unsubscribe(key, forceUpdate)\n}, [key, forceUpdate])\n```\nHere we're subscribing to the cache for our specific key when the component mounts, and we `unsubscribe` when it unmounts (or if props change) in the returned cleanup function. ([React docs on useEffect](https://reactjs.org/docs/hooks-reference.html#useeffect))\n\n\nWe can clean up our `mutate` function a bit. We don't need to call `forceUpdate` from it, because it's now being called as a result of `setCache` and the subscription:\n\n```diff\n  const mutate = React.useCallback(\n    (data: T) =\u003e {\n      setCache(key, data);\n-     forceUpdate();\n    },\n-   [key, forceUpdate]\n+   [key]\n  );\n```\n\n### Final version\n\nOur custom hook now looks like this:\n\n```ts\nimport { getCache, setCache, subscribe, unsubscribe } from './cache';\n\nexport function useAsyncFunction\u003cT\u003e(key: string, asyncFunction: () =\u003e Promise\u003cT\u003e) {\n  const [error, setError] = React.useState\u003cstring | undefined\u003e(undefined);\n  const forceUpdate = useForceUpdate();\n\n  const mutate = React.useCallback((data: T) =\u003e setCache(key, data), [key]);\n\n  const load = React.useCallback(() =\u003e {\n    asyncFunction()\n      .then(data =\u003e {\n        mutate(data);\n        setError(undefined);\n      })\n      .catch(error =\u003e setError(error.toString()));\n  }, [asyncFunction, mutate]);\n\n  React.useEffect(load, [load]);\n\n  React.useEffect(() =\u003e{\n    subscribe(key, forceUpdate);\n    return () =\u003e unsubscribe(key, forceUpdate)\n  }, [key, forceUpdate])\n\n  const data = getCache(key) as T | undefined;\n  return { data, error, mutate, reload: load };\n}\n\nfunction useForceUpdate() {\n  const [, setState] = React.useState\u003cnumber[]\u003e([]);\n  return React.useCallback(() =\u003e setState([]), [setState]);\n}\n```\n\nThis implementation is not meant to be used in production. It's a basic approximation to what SWR does, but it's lacking many of the great features of the library.\n\n| ✅ Included                            | ❌ Not included                         |\n|----------------------------------------|-----------------------------------------|\n| Return cached value while fetching     | Dedupe identical requests               |\n| Provide a (revalidate) reload function | Focus revalidation                      |\n| Local mutation                         | Refetch on interval                     |\n|                                        | Scroll Position Recovery and Pagination |\n|                                        | Dependent Fetching                      |\n|                                        | Suspense                                |\n\n## Conclusion\n\nI think [SWR](https://swr.now.sh/) (or [react-query](https://github.com/tannerlinsley/react-query#readme)) is a much better solution than storing fetched data in a React component using `useState` or `useReducer`.\n\nI continue to store my application state using custom hooks that use `useReducer` and `useState` but for remote data, I prefer to store it in a cache.",
    "positive_reactions_count": 221,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--zvxVP_OC--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/1e3jxdmy28g4ouglxuz1.png",
    "tag_list": [
      "react",
      "typescript",
      "javascript",
      "swr"
    ],
    "canonical_url": "https://dev.to/juliang/how-swr-works-4lkb",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 179919,
    "title": "Readonly\u003cT\u003e and Better Error Messages",
    "description": "A few weeks ago I learned something about TypeScript errors and utility types.  The following is true...",
    "published": true,
    "published_at": "2020-02-05T15:55:19.643Z",
    "slug": "readonly-t-and-better-error-messages-3i9l",
    "path": "/juliang/readonly-t-and-better-error-messages-3i9l",
    "url": "https://dev.to/juliang/readonly-t-and-better-error-messages-3i9l",
    "comments_count": 0,
    "public_reactions_count": 4,
    "page_views_count": 158,
    "published_timestamp": "2020-02-05T15:55:19Z",
    "body_markdown": "A few weeks ago I learned something about TypeScript errors and utility types.\n\n**The following is true in TypeScript v3.7.5.** In my experience, error messages in TS improve a lot with each release, so this may soon be irrelevant.\n\nAs usual, here's an example with **bananas**.\n\nI had this `Banana` type:\n\n```ts\ntype Banana = {\n  id: number;\n  name: string;\n  color: number;\n  weight?: number;\n  length?: number;\n  thumbnail?: string;\n  pictures?: Array\u003cstring\u003e;\n};\n```\n\nI was trying to be clever and I thought I would make my type immutable by using the [Readonly\u003cT\u003e](https://www.typescriptlang.org/docs/handbook/utility-types.html#readonlyt) utility type like this:\n\n```ts\ntype Banana = Readonly\u003c{\n  id: number;\n  name: string;\n  color: number;\n  weight?: number;\n  length?: number;\n  thumbnails?: string;\n  pictures?: ReadonlyArray\u003cstring\u003e;\n}\u003e;\n```\n\n**But this turned out not to be such a great idea.**\n\n I had made a (Readonly)Map with a few bananas:\n\n```ts\nconst bananaMap: ReadonlyMap\u003cnumber, Banana\u003e = new Map([\n  [1, { id: 1, name: \"yellow banana\", color: 0xffff00 }],\n  [2, { id: 2, name: \"red banana\", color: 0xff0000 }],\n  [3, { id: 3, name: \"green banana\", color: 0x00ff00 }]\n]);\n```\n\nThen I tried to access an element in this way:\n\n```ts\nconst banana: Banana = bananaMap.get(1);\n```\n\nAnd I got an error on the `banana` identifier which looked like this:\n\n```\nType 'Readonly\u003c{ id: number; name: string; color: number; weight?: number \n| undefined; length?: number | undefined; thumbnails?: string | undefined;\n pictures?: readonly string[] | undefined; }\u003e | undefined' is not \nassignable to type 'Readonly\u003c{ id: number; name: string; color: number; \nweight?: number | undefined; length?: number | undefined; thumbnails?: \nstring | undefined; pictures?: readonly string[] | undefined; }\u003e'.\n  Type 'undefined' is not assignable to type 'Readonly\u003c{ id: number; \nname: string; color: number; weight?: number | undefined; length?: \nnumber | undefined; thumbnails?: string | undefined; pictures?: \nreadonly string[] | undefined; }\u003e'.\n```\n\nIt took me a while to understand what the problem was. The important part was on the second \"paragraph\" and I had to scroll down to find it, and still stare at it for a while.\n\n\u003e You can see this example in the [TypeScript Playground](https://www.typescriptlang.org/play/#code/FAFwngDgpgBAQgQwHbITAvDASlBATAeyQBswAeAb2BhgEs8AuGJAVwFsAjKAJwG5rmCNlCYBnEN1pIA5vxoBjAsQLcmrTjzkwA7lFrSAFiAD8a9lz4DiUGSAOnm5zQLvmUtYqIfjJMrRFp5EBZuKC8mHHwiUgBBbm4Ech8paQA+fgBfdOBgRSRxGA5UFABZBAgI3EISMDKIMnULABp4YoRUjGYobRg6gAoAbQEBgEYWijpGGDHBYSYAIjAoYmUeopQUeZbFZVUYAAYADwAzU+P9-ZgMgF0m4YAmccmmR9mRGHnQvEK2rZgdlRMI6nC4XK63YYAZie9CY0LeC2koRsPw2CD+AL2RwuIMuN2A1wAlPxckQCutUExEGjOhTSuUAHTSKAgPojYlAA)\n\n**So I changed the type, marking each field as `readonly` instead:**\n\n```ts\ntype Banana = {\n  readonly id: number;\n  readonly name: string;\n  readonly color: number;\n  readonly weight?: number;\n  readonly length?: number;\n  readonly thumbnails?: string;\n  readonly pictures?: ReadonlyArray\u003cstring\u003e;\n};\n```\n\nThen the error message looked a bit better:\n\n```\nType 'Banana | undefined' is not assignable to type 'Banana'.\n  Type 'undefined' is not assignable to type 'Banana'.\n```\n\n**And the issue was evident!** The `get` method in the `Map` class [returns an element or `undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get#Return_value). That means we can't annotate `const banana` with the `Banana` type.\n\n```ts\nconst banana: Banana = bananaMap.get(1); // ❌ error!\n```\n\nSome possible fixes:\n\n```ts\n// 1\nconst banana: Banana | undefined = bananaMap.get(1); // ✅ no error\n\n// 2\nconst banana: Banana = bananaMap.get(1)!; // ⚠️ no error, but (*)\n```\n\n\\* I would [avoid the non-null assertion operator](https://juliangaramendy.dev/null-checking/) when possible.\n\n\u003e You can see this new example in the [TypeScript Playground](https://www.typescriptlang.org/play/#code/FAFwngDgpgBAQgQwHbITAvDA3sGMBOUCAJgPZIA2YMAlsQFwxICuAtgEZT4DcuBRZStRSsojAM4h8NJAHNeeQiXJUYAY1IVS+Riw5cF-ZUJgB3KDVkALEAH5dbTjz5LBqilDkgr9po4MuAirU3o4oNBTivpLScoauwTAQNGogzIRRjABKQUIAgvj4CGAAPDEysgB8vAC+vMAaSJIw7KgoALIIENm5VJ0QJXpOADTwbQiVGExQpjD9ABQA2nyLAIyjWLQMMOtMCKKMAERgUBRas60oKIejGlo6MAAMAB4AZu+vj48wNQC6wysAEwbLaMYF7A4wQ6EYgtcY3dSabSMF7vL5fH7-FYAZhBdEYuIhYihskInjhVwQCLuyKezy+aO+f2AvwAlPVGs1LqhGIhKVNuR0ugA6WRQEDzVbsmAAehlMC4+G0wAa5GarGKnD5PLG-IAPjBmEhiFBXjIoLDMIKEP1ReLJdK5UxSArCsrVU0QDAEOJxFwQBbtSheeMBeNbWKJVKAITcWXypAuxXaIA).\n\n#### UPDATE:\n\nMy friend [Albert](https://twitter.com/aplanap) pointed our that we can get the \"nice and short\" error message mentioning out `Banana` type if we use `interface` instead of `type`:\n\n```ts\ninterface Banana extends Readonly\u003c{\n  id: number;\n  name: string;\n  color: number;\n  weight?: number;\n  length?: number;\n  thumbnails?: string;\n  pictures?: ReadonlyArray\u003cstring\u003e;\n}\u003e { }\n```\n\n\u003e You can see this last example in [TypeScript Playground](https://www.typescriptlang.org/play/#code/FASwdgLgpgTgZgQwMZQAQCEFiw1UAe0YAJgM6oBKUCxA9mADYCeAPAN7CqojEBcqYAK4BbAEawA3JwEJhUfqQgxwAcylcktBrRj8hYydIDuUECoAWEAPx6R4mOtQMoYFRHM2Bdw13d3sIAyknorKro4ADiBIEIIwUMH8VDT0zACCMDAIrKGqAHxSAL55qGyohcDAmmCKqKI42ACyCBFJ1HSMTM0RLPr2ADQYDQglALwCUEao3QAUANrScwCMg2U8-CsycvwARExQDNpT9djYO4Oa2rqoAAz4cA9wNzflALr9iwBMq9x8qN9beSoHbxYh1YbnVCXHT8O4PZ7PN4fLhzADMP3WqHRgN2KniLnBpwQkOh1zuz3hL0Kr2ArwAlFIqvRaiccPxMETUONWU0WgA6FRQCAzJYMoA)\n\n------\n\nI would love to hear what **you** use to declare immutability in your code.  \nPlease comment!\n\n------\n\nPhoto by [v2osk](https://unsplash.com/@v2osk) on [Unsplash](https://unsplash.com/s/photos/dolomites)",
    "positive_reactions_count": 4,
    "cover_image": null,
    "tag_list": [
      "typescript",
      "bananas"
    ],
    "canonical_url": "https://juliangaramendy.netlify.com/readonly-and-errors/",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 173535,
    "title": "How do you prototype?",
    "description": "Web developers out there, do you prototype?  If you do:  Do you throw away the prototype code or refa...",
    "published": true,
    "published_at": "2019-09-20T19:57:59.914Z",
    "slug": "how-do-you-prototype-1gaa",
    "path": "/juliang/how-do-you-prototype-1gaa",
    "url": "https://dev.to/juliang/how-do-you-prototype-1gaa",
    "comments_count": 2,
    "public_reactions_count": 7,
    "page_views_count": 84,
    "published_timestamp": "2019-09-20T19:57:59Z",
    "body_markdown": "Web developers out there, do you prototype?\n\nIf you do:\n\nDo you throw away the prototype code or refactor it later?\n\nWhat corners do you cut?\n\nHow is your prototype code different from your production code?\n\nDo you use different tools?",
    "positive_reactions_count": 7,
    "cover_image": null,
    "tag_list": [
      "discuss"
    ],
    "canonical_url": "https://dev.to/juliang/how-do-you-prototype-1gaa",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    },
    "flare_tag": {
      "name": "discuss",
      "bg_color_hex": "#000000",
      "text_color_hex": "#FFFFFF"
    }
  },
  {
    "type_of": "article",
    "id": 172053,
    "title": "Sharing Remote Data with React Context",
    "description": "In this series, instead of using a state-management library or proposing a one-size-fits-all solution...",
    "published": true,
    "published_at": "2019-09-17T14:32:38.997Z",
    "slug": "sharing-remote-data-with-react-context-3859",
    "path": "/juliang/sharing-remote-data-with-react-context-3859",
    "url": "https://dev.to/juliang/sharing-remote-data-with-react-context-3859",
    "comments_count": 0,
    "public_reactions_count": 40,
    "page_views_count": 3049,
    "published_timestamp": "2019-09-17T14:32:38Z",
    "body_markdown": "**In this series, instead of using a state-management library or proposing a one-size-fits-all solution, we start from the bare minimum and we build up our state management as we need it.**\n\n----\n\n* In the first article we described how we [load and display data with hooks](https://dev.to/juliang/loading-and-displaying-data-with-hooks-jlj).  \n* In the second article we learned how to [change remote data with hooks](https://dev.to/juliang/changing-remote-data-with-hooks-565p).\n* **In this third article we'll see how to share data between components with React Context, without using globals, singletons or resorting to state management libraries like MobX or Redux.**\n* In the fourth article we'll see how to share data between components using [SWR](https://swr.now.sh/), which is probably what we should have done from the beginning.\n\n----\n\nThe final code can be found in this [GitHub repo](https://github.com/JulianG/minimal-state-management-demo). It's TypeScript, but the type annotations are minimal. **Also, please note this is not production code.** In order to focus on state management, many other aspects have not been considered (e.g. [Dependency Inversion](https://en.wikipedia.org/wiki/Dependency_inversion_principle), testing or optimisations).\n\n## Sharing Remote Data with React Context\n\n⚠️ **Before we begin**, you may want to check out [this tag from the repo](https://github.com/JulianG/minimal-state-management-demo/tree/07-adding-styles-and-images/src). The project has been improved from the last article with some styling and game screenshots.\n\nRemember our list of games? **There's a third requirement:** We want to display a sign near the top of the page, indicating the total number of games, how many are finished and how many are in progress. Something like this:\n\n![List of games with totals panel](https://thepracticaldev.s3.amazonaws.com/i/onbdxd66zfp7scwt3ebe.png)\n\n### Lifting State to a common ancestor\n\n**But first** let's imagine our application is getting a bit more complex and we decide to break it into separate components. We'll create a `GamesScreen` and a  `GameGrid` component.\n\n```tsx\nApp\n +- GamesScreen (useGames hook here)\n \t\t +- Totals\n \t\t +- GameGrid\n```\n\nNow our `App` component is not responsible for fetching the games list. We do that in `GamesScreen`.\n\n```tsx\nexport const App = () =\u003e {\n  return (\n    \u003c\u003e\n      \u003ch1\u003eMy Favourite Commodore 64 Games\u003c/h1\u003e\n      \u003cGamesScreen /\u003e\n    \u003c/\u003e\n  );\n};\n```\n\nThe new `GamesScreen` component uses our `useGames` custom hook to keep state and handle the error and pending states and eventually rendering two children components.\n\n```tsx\nexport const GamesScreen = () =\u003e {\n  const { games, error, isPending, markAsFinished } = useGames();\n\n  return (\n    \u003c\u003e\n      {error \u0026\u0026 \u003cpre\u003eERROR! {error}...\u003c/pre\u003e}\n      {isPending \u0026\u0026 \u003cpre\u003eLOADING...\u003c/pre\u003e}\n      \u003cTotals games={games} /\u003e\n      \u003cGameGrid games={games} markAsFinished={markAsFinished} /\u003e\n    \u003c/\u003e\n  );\n};\n```\n\nWe extracted some code to a `GameGrid` compoent.\n\n```tsx\ntype GameGridProps = { games: Game[]; markAsFinished: (id: number) =\u003e void };\n\nexport const GameGrid = ({ games, markAsFinished }: GameGridProps) =\u003e {\n  return (\n    \u003cdiv className=\"gamegrid\"\u003e\n      {games.map(game =\u003e (\n        \u003cGameComponent key={game.id} game={game} markAsFinished={markAsFinished} /\u003e\n      ))}\n    \u003c/div\u003e\n  );\n};\n```\n\nAnd finally we can create a new `Totals` component:\n\n```tsx\ntype TotalsProps = { games: Game[] };\n\nexport const Totals = ({ games }: TotalsProps) =\u003e {\n  const totalGames = games.length;\n  const inProgress = games.filter(g =\u003e g.status === 'in-progress').length;\n  const finished = games.filter(g =\u003e g.status === 'finished').length;\n\n  return (\n    \u003cdiv className=\"card\"\u003e\n      total games: {totalGames}\u003cbr /\u003e\n      in progress️: {inProgress}\u003cbr /\u003e\n      finished: {finished}\n    \u003c/div\u003e\n  );\n};\n```\n\nThe resulting code can be found in the repo under the [08-lifting-state](https://github.com/JulianG/minimal-state-management-demo/tree/08-lifting-state/src) tag.\n\n### Sharing State using hooks (the wrong way)\n\nThat's all we need to know if two sibling components need access to the same state.\n\n **But what if it we have a more complex component tree?**\n\nIf the components sharing state are far apart, getting the required props to each of them may result in [prop drilling](https://kentcdodds.com/blog/prop-drilling). Let's imagine an even more complex structure:\n\n```\nApp\n +- GamesScreen (useGames hook here)\n     +- MenuBar❗\n         +- SomeOtherMenuComponent ❗\n             +- Totals (requires the list of games)\n     +- GamesPageContent❗\n         +- SomeOtherComponent❗\n             +- GameGrid (requires the list of games and the markAsFinished function)\n```\n\nWith the above structure we would need to keep the state in `GamesScreen` because it's the closest common ancestor of `GameGrid` and `Totals`.\n\nThe problem is that in order to pass the required props, `MenuBar`, `SomeOtherMenuComponent`, `GamesPageContent` and `SomeOtherComponent` would require props with the list of `games` and the `markAsFinished` function, only to pass it down to some children component.\n\n**We don't want to do that.  We can use [React Context](https://reactjs.org/docs/context.html) to solve this problem.**\n\n**Note:** To keep the demo repository and this article simple we won't create any of those intermediate components marked with ❗️.  \nWe're going to **pretend** that the `GameGrid` and `Total` components are far apart.\n\nOur current **GamesScreen.tsx**\n\n```tsx\nexport const GamesScreen = () =\u003e {\n  const { games, error, isPending, markAsFinished } = useGames(); ❌\n\n  return (\n    \u003c\u003e\n      {error \u0026\u0026 \u003cpre\u003eERROR! {error}...\u003c/pre\u003e} ❌\n      {isPending \u0026\u0026 \u003cpre\u003eLOADING...\u003c/pre\u003e} ❌\n      \u003cTotals games={games} /\u003e\n      \u003cGameGrid games={games} markAsFinished={markAsFinished} /\u003e\n    \u003c/\u003e\n  );\n};\n```\n\nIf `Totals` and `GameGrid` are far apart they don't share a common parent (only a common ancestor higher up in the tree). That means we can't call the `useGames` hook here and pass some props down without resorting to prop-drilling, as explained above.\n\nFor now we're going to call `useGames` inside each of our components:\n\nUpdated **GamesScreen.tsx**\n\n```tsx\nexport const GamesScreen = () =\u003e {\n  return (\n    \u003c\u003e\n      \u003cTotals /\u003e\n      \u003cGameGrid /\u003e\n    \u003c/\u003e\n  );\n};\n```\n\nUpdated **GameGrid.tsx**\n\n```tsx\nexport const GameGrid = () =\u003e {\n  const { games, error, isPending, markAsFinished } = useGames();\n  \n  return (\n    \u003cdiv className=\"gamegrid\"\u003e\n      {error \u0026\u0026 \u003cpre\u003eERROR! {error}...\u003c/pre\u003e}\n      {isPending \u0026\u0026 \u003cpre\u003eLOADING...\u003c/pre\u003e}\n      {games.map(game =\u003e (\n        \u003cGameComponent key={game.id} game={game} markAsFinished={markAsFinished} /\u003e\n      ))}\n    \u003c/div\u003e\n  );\n};\n```\n\nThe updated `GameGrid` component does not receive any props, but now it has to handle the error and pending states itself.\n\nUpdated **Totals.tsx**\n\n```tsx\nexport const Totals = () =\u003e {\n  const { games } = useGames();\n\n  const totalGames = games.length;\n  const inProgress = games.filter(g =\u003e g.status === 'in-progress').length;\n  const finished = games.filter(g =\u003e g.status === 'finished').length;\n\n  return (\n    \u003cdiv className=\"card\"\u003e\n      total games: {totalGames}\n      \u003cbr /\u003e\n      in progress️: {inProgress}\n      \u003cbr /\u003e\n      finished: {finished}\n    \u003c/div\u003e\n  );\n};\n```\n\nIn the `Totals` component we only use `{games}` from the custom hook, because we don't need `markAsFinished` function and we don't worry about error and pending states for this small component.\n\nYou can inspect the code from the repo using the [09-duplicating-state](https://github.com/JulianG/minimal-state-management-demo/tree/09-duplicating-state/src) tag.\n\n**Wait wasn't this about React Context?**\n\nThe above code works because both components now access the same server API and request the same list of games. Twice. However, when we mark some games as finished, only the `GameGrid` component reflects this. The `Totals` component is not updated.\n\n![the total panel reports zero finished games but the gamegrid shows 2 games are finished](https://thepracticaldev.s3.amazonaws.com/i/x8ads85i0ay7ijcfym2q.png)\n\nFor example, after marking two games as finished, the `GameGrid` component shows them as finished, as expected, but the `Totals` component continues to report zero finished games.\n\n**This is why we need to fetch and update only one list of games.**\n\n### Sharing state using React Context (the right way)\n\nOK. Let's see how we do this with React Context.\n\nWe're going to update our `GamesScreen` component.\n\n```tsx\nexport const GamesScreen = () =\u003e {\n  return (\n    \u003cGamesContextProvider\u003e\n      \u003cTotals /\u003e\n      \u003cGameGrid /\u003e\n    \u003c/GamesContextProvider\u003e\n  );\n};\n```\n\nInstead of wrapping `Totals` and `GameGrid` in a fragment `\u003c\u003e`, we wrap them in a new `GamesContextProvider` component which we'll create next.\n\n**GamesContext.tsx**\n\n```tsx\ntype GamesContext = ReturnType\u003ctypeof useGames\u003e;\n\nexport const gamesContext = React.createContext\u003cGamesContext\u003e({\n  games: [],\n  error: null,\n  isPending: true,\n  markAsFinished: () =\u003e {}\n});\n\nexport const GamesContextProvider: React.FC = ({ children }) =\u003e {\n  return \u003cgamesContext.Provider value={useGames()}\u003e{children}\u003c/gamesContext.Provider\u003e;\n};\n```\n\n*For more information see [Using React Context](https://reactjs.org/docs/context.html) and [React Hooks Reference: useContext](https://reactjs.org/docs/hooks-reference.html#usecontext).*\n\nThis is the simplest thing we could do. Then we update our `GameGrid` and `Totals` components to use the context like this:\n\n```tsx\nimport { gamesContext } from '../GamesContext';\n\nexport const GameGrid = () =\u003e {\n//const { games, error, isPending, markAsFinished } = useGames();\n  const { games, error, isPending, markAsFinished } = React.useContext(gamesContext);\n```\n\nBut there's a problem. If we forget to wrap this component in `GamesContextProvider` or if someone in the future accidentally removes it, there won't be any errors. The list of games will never be loaded, and the context will never change its value.\n\nYou can try it. Check out the [10-minimal-context](https://github.com/JulianG/minimal-state-management-demo/tree/10-minimal-context/src) tag and edit **GamesScreen.tsx** removing the context provider to see that the games never load.\n\nA better approach is to use `undefined` as a default value for our context.\n\n```ts\ntype GamesContext = ReturnType\u003ctypeof useGames\u003e;\n\nconst gamesContext = React.createContext\u003cGamesContext | undefined\u003e(undefined);\n\nexport const useGamesContext = (): GamesContext =\u003e {\n  const context = React.useContext(gamesContext);\n  if (!context) {\n    throw new Error(\n      'useGameContext must be used in a component within a GameContextProvider.'\n    );\n  }\n  return context;\n};\n```\n\nWe also create a custom `useGamesContext` hook that throws if the context is undefined, which can only happen if the provider is missing.\n\n```tsx\nimport { useGamesContext } from '../GamesContext';\n\nexport const GameGrid = () =\u003e {\n//const { games, error, isPending, markAsFinished } = React.useContext(gamesContext);\n  const { games, error, isPending, markAsFinished } = useGamesContext();\n\n```\n\nWe do the same in the `Totals` component.\n\n```ts\nimport { useGamesContext } from '../GamesContext';\n\nexport const Totals = () =\u003e {\n//const { games } = React.useContext(gamesContext);\n  const { games } = useGamesContext();\n\n```\n\nThat's it! The final version of code can be found in the [11-safe-context](https://github.com/JulianG/minimal-state-management-demo/tree/11-safe-context/src) tag.\n\n![correct-totals](https://thepracticaldev.s3.amazonaws.com/i/12mn1tgnprhg8x012zft.png)\n\n## Conclusion\n\nWe have managed to share state in our aplication without making it global and without suffering from prop drilling. Any component requiring access to the games list can use the custom hook provided. This hooks exposes a function to mutate such data in a safe way, while immediately persisting it on the server according to our business logic.\n\n## Resources\n\nFurther reading:\n\n- [Using the State Hook](https://reactjs.org/docs/hooks-state.html)\n- [Using the Effect Hook](https://reactjs.org/docs/hooks-effect.html)\n- [Hooks API Reference](https://reactjs.org/docs/hooks-reference.html)\n- [When to useMemo and useCallback](https://kentcdodds.com/blog/usememo-and-usecallback/)\n- [Cancelling a Promise with React.useEffect](https://juliangaramendy.dev/use-promise-subscription/)\n- [Using React Context](https://reactjs.org/docs/context.html)\n- [React Hooks Reference: useContext](https://reactjs.org/docs/hooks-reference.html#usecontext)\n- [React Context API vs. Redux](https://daveceddia.com/context-api-vs-redux/)\n- [How to use React Context effectively](https://kentcdodds.com/blog/how-to-use-react-context-effectively)\n\n\n",
    "positive_reactions_count": 40,
    "cover_image": null,
    "tag_list": [
      "react",
      "typescript",
      "javascript"
    ],
    "canonical_url": "https://dev.to/juliang/sharing-remote-data-with-react-context-3859",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 167333,
    "title": "Changing Remote Data with Hooks",
    "description": "In this series, instead of using a state-management library or proposing a one-size-fits-all solution...",
    "published": true,
    "published_at": "2019-09-17T14:31:53.005Z",
    "slug": "changing-remote-data-with-hooks-565p",
    "path": "/juliang/changing-remote-data-with-hooks-565p",
    "url": "https://dev.to/juliang/changing-remote-data-with-hooks-565p",
    "comments_count": 0,
    "public_reactions_count": 16,
    "page_views_count": 1614,
    "published_timestamp": "2019-09-17T14:31:53Z",
    "body_markdown": "**In this series, instead of using a state-management library or proposing a one-size-fits-all solution, we start from the bare minimum and we build up our state management as we need it.**\n\n----\n\n* In the first article we described how we [load and display data with hooks](https://dev.to/juliang/loading-and-displaying-data-with-hooks-jlj).\n* **In this second article we'll learn how to change remote data with hooks.**\n* In the third article we'll see how to share data between components with React Context without using globals, singletons or resorting to state management libraries like MobX or Redux.\n* In the fourth article we'll see how to share data between components using [SWR](https://swr.now.sh/), which is probably what we should have done from the beginning.\n\n----\n\nThe final code can be found in this [GitHub repo](https://github.com/JulianG/minimal-state-management-demo). It's TypeScript, but the type annotations are minimal. **Also, please note this is not production code.** In order to focus on state management, many other aspects have not been considered (e.g. [Dependency Inversion](https://en.wikipedia.org/wiki/Dependency_inversion_principle), testing or optimisations).\n\n## Changing Remote Data with Hooks\n\nWe have our list of games from the previous article. **Now there's a new requirement:** We want to let the user mark each game as \"finished\". When they do, we send the changes to the server right away.\n\n![my favourite commodore 64 games](https://thepracticaldev.s3.amazonaws.com/i/qbx38iq5guj2me3jnrkc.png)\n\nIn order to change the value of `\"status\"` from `\"in-progress\"` to `\"finished\"` we make a **`PATCH`** request:\n\n```js\nconst setGameStatus = (id: number, status: Game['status']): Promise\u003cGame\u003e =\u003e {\n  return fetch('http://localhost:3001/games/' + id, {\n    method: \"PATCH\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ status: status })\n    })\n    .then(response =\u003e response.json());\n}\n```\n\nWhich we can use like this:\n\n```js\nconst promise = setGameStatus(7, \"finished\");\n```\n\n**But, where do we put this code?**\n\nWe can approach the problem from the other end: **How would we like to use our hook?**\n\nLet's create a `GameComponent` to render a single game with an onClick handler to mark it as finished.\n\n----\n\n***Note:*** *To keep this simple we'll make a quick `\u003cpre\u003e` with everything in it, including the `onClick` handler.*\n\n----\n\n```tsx\ntype GameComponentProps = { game: Game; markAsFinished: (id:number) =\u003e void };\n\nconst GameComponent = ({ game, markAsFinished }: GameComponentProps) =\u003e {\n  return (\n    \u003cpre onClick={() =\u003e markAsFinished(game.id)}\u003e\n      Title: {game.title}\n      Year: {game.year}\n      Status: {game.status}\n    \u003c/pre\u003e\n  );\n};\n```\n\nThis new component needs a `game` object and a `markAsFinished` function. So our custom hook should return a function along with the list of games, error and pending:\n\n```ts\n//const { games, error, isPending } = useGames();\n  const { games, error, isPending, markAsFinished } = useGames();\n```\n\nThis would allow us to render the list of games like this:\n```tsx\nexport const App = () =\u003e {\n  const { games, error, isPending, markAsFinished } = useGames();\n\n  return (\n    \u003c\u003e\n      {error \u0026\u0026 \u003cpre\u003eERROR! {error}...\u003c/pre\u003e}\n      {isPending \u0026\u0026 \u003cpre\u003eLOADING...\u003c/pre\u003e}\n      \u003col\u003e\n        {games.map(game =\u003e (\n          \u003cli key={game.id}\u003e\n            \u003cGameComponent game={game} markAsFinished={markAsFinished} /\u003e\n          \u003c/li\u003e\n        ))}\n      \u003c/ol\u003e\n    \u003c/\u003e\n  );\n};\n```\nThat's what we would like to use. Let's change our `useGames` hook implementation.\n\nHere's what it looks like so far:\n\n```ts\nexport const useGames = () =\u003e {\n  const [games, error, isPending] = useAsyncFunction(getGames, emptyList);\n  return { games, error, isPending };\n};\n```\n\nWe need to return a `markAsFinished` function.\n\n```js\nexport const useGames = () =\u003e {\n  const [games, error, isPending] = useAsyncFunction(getGames, emptyList);\n\n  const markAsFinished = (id: number) =\u003e {\n    setGameStatus(id, 'finished'); // setGameStatus is already defined outside the hook\n  };\n\n  return { games, error, isPending, markAsFinished };\n};\n```\n\nWith this code (*[see repo](https://github.com/JulianG/minimal-state-management-demo/tree/04-patch-server-data/src)*) we are now sending our changes to the server, **but unless we reload the page and fetch the list of games again, our client-side data is not affected.**\n\n### Updating client-side data\n\nNow the server has the updated value, but the client does not: The list is not updated after a change.\n\n```js\nconst markAsFinished = (id: number) =\u003e {\n  setGameStatus(id, 'finished')\n    .then(game =\u003e ?????); // 🤔\n};\n```\n\nOur server's `PATCH` request returns a promise with the modified game object which we can use to update our client-side list. There's no need to re-fetch the list of games or even the affected game after \"patching\".\n\n```ts\nconst markAsFinished = (id: number) =\u003e {\n  setGameStatus(id, 'finished')\n    .then(updateGame); // 🤔 we need to define updateGame\n};\n```\n\nOur `updateGame` function will make a copy of the array of games, find the game by id and replace it with the new one.\n\n```js\nexport const useGames = () =\u003e {\n  const [games, error, isPending] = useAsyncFunction(getGames, emptyList);\n\n  const updateGame = (game: Game) =\u003e {\n    const index = games.findIndex(g =\u003e g.id === game.id);\n    if (index \u003e= 0) {\n      const gamesCopy = games.slice();\n      gamesCopy[index] = game;\n      setGames(gamesCopy); // 🤔 I don't see setGames declared anywhere...\n    }\n  }\n  const markAsFinished = (id: number) =\u003e {\n    setGameStatus(id, 'finished').then(updateGame);\n  };\n  \n  return { games, error, isPending, markAsFinished };\n};\n```\n\nOh! We don't have a `setGames` function. Our `useAsyncFunction` does not provide a way to set the value externally. But we don't want to modify it because in a real world project we'd probably replace its functionality with [react-async](https://www.npmjs.com/package/react-async).\n\nWe can change our `useGames` custom hook to keep state, and update it whenever the `fetchedGames` change (or when we call `setGames`, of course).\n\n```ts\nexport const useGames = () =\u003e {\n  const [fetchedGames, error, isPending] = useAsyncFunction(getGames, emptyList);\n\n  const [games, setGames] = React.useState(emptyList); // 😎 now we have setGames!\n  React.useEffect(() =\u003e {\n    setGames(fetchedGames);\n  }, [fetchedGames]);\n  \n  ...\n```\n\nOur `useGame` hook file now looks like this (*[see the entire file in the repo](https://github.com/JulianG/minimal-state-management-demo/blob/05-update-client-data/src/useGames.ts)*)\n\n```ts\nexport const useGames = () =\u003e {\n  const [fetchedGames, error, isPending] = useAsyncFunction(getGames, emptyList);\n\n  const [games, setGames] = React.useState(emptyList);\n  React.useEffect(() =\u003e {\n    setGames(fetchedGames);\n  }, [fetchedGames]);\n\n  const updateGame = (game: Game) =\u003e {\n    const index = games.findIndex(g =\u003e g.id === game.id);\n    if (index \u003e= 0) {\n      const gamesCopy = games.slice();\n      gamesCopy[index] = game;\n      setGames(gamesCopy);\n    }\n  };\n  const markAsFinished = (id: number) =\u003e {\n    setGameStatus(id, 'finished').then(updateGame);\n  };\n\n  return { games, error, isPending, markAsFinished };\n};\n```\n\n### Refactoring\n\nThat looks a bit messy. We can extract it to a custom hook:\n\n```ts\nconst useFetchedGames = () =\u003e {\n  const [fetchedGames, error, isPending] = useAsyncFunction(getGames, emptyList);\n\n  const [games, setGames] = React.useState(emptyList);\n  React.useEffect(() =\u003e {\n    setGames(fetchedGames);\n  }, [fetchedGames]);\n\n  return {games, setGames, error, isPending};\n}\n```\n```ts\nexport const useGames = () =\u003e {\n  const { games, error, isPending, setGames } = useFetchedGames();\n\t...\n}\n```\n\n(*[see the entire file in the repo](https://github.com/JulianG/minimal-state-management-demo/blob/05-update-client-data-refactored/src/useGames.ts)*)\n\n### Handling errors\n\n```\n❌ 404 Not Found\n```\n\nJust like before, we've forgotten about handling errors. What happens when the `PATCH` request fails?\n\nFirst of all, we have two functions calling the server but only one (`getGames`) checks the status code of the response.\n\n```ts\nconst getGames = (): Promise\u003cGame[]\u003e =\u003e {\n  return fetch('http://localhost:3001/games/').then(response =\u003e {\n    if (response.status !== 200) {\n      throw new Error(`${response.status} ${response.statusText}`);\n    }\n    return response.json();\n  });\n};\n\nexport const setGameStatus = (id: number, status: Game['status']): Promise\u003cGame\u003e =\u003e {\n  return fetch('http://localhost:3001/games/' + id, {\n    method: 'PATCH',\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ status: status })\n  }).then(response =\u003e response.json()); // 😰 no error handling\n};\n```\n\nWe don't want to repeat ourselves so we'll extract the error handling to a new function and use it in both cases.\n\n```ts\nfunction parseResponse\u003cT\u003e(response: Response): Promise\u003cT\u003e {\n  if (response.status !== 200) {\n    throw new Error(`${response.status} ${response.statusText}`);\n  }\n  return response.json();\n}\n\nexport const getGames = (): Promise\u003cGame[]\u003e =\u003e {\n  return fetch('http://localhost:3001/games/').then(response =\u003e\n    parseResponse(response)\n  );\n};\n\nexport const setGameStatus = (id: number, status: Game['status']): Promise\u003cGame\u003e =\u003e {\n  return fetch('http://localhost:3001/games/' + id, {\n    method: 'PATCH',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ status: status })\n  }).then(response =\u003e parseResponse(response));\n};\n```\n\nTo keep things tidy, we move these functions to a new **gameClientAPI.ts** file (*[see repo](https://github.com/JulianG/minimal-state-management-demo/blob/06-error-handling-1/src/gameClientAPI.ts)*). Our `useGames` hook imports the functions from it. We're separating concerns and keep our files short.\n\nNow we can catch errors from `markAsFinished`:\n\n```ts\nconst markAsFinished = (id: number) =\u003e {\n  setGameStatus(id, 'finished')\n    .then(updateGame)\n    .catch(error =\u003e\n      alert(\n        `There was a problem updating this game.\\n` +\n          `Please try again later.\\n\\n` +\n          `(${error.toString()})`\n      )\n    );\n};\n```\n\n(*[see repo](https://github.com/JulianG/minimal-state-management-demo/blob/06-error-handling-2/src/useGames.ts)*)\n\n## Conclusion\n\nWe have successfully wrapped an imperative API in a more declarative API in the form of a custom React hook so it can be used in React function components. When a component needs to access the list of games and make changes to it, it can simply import the `useGames` hook.\n\n### What's next?\n\nThis is fine as long as the data is used by only one component. There is no need to have a global(ish) store, or use Redux or MobX. But if more than one component require access to the same data, we should \"lift\" it to a common ancestor component.\n\nIn cases where that common ancestor is not directly the parent of the consimung components, we can avoid prop-drilling by using React Context.\n\nWe'll see how we do that in the [next article](https://dev.to/juliang/sharing-remote-data-with-react-context-3859) of this series.\n\n## Resources\n\nFurther reading:\n\n- [Using the State Hook](https://reactjs.org/docs/hooks-state.html)\n- [Using the Effect Hook](https://reactjs.org/docs/hooks-effect.html)\n- [Hooks API Reference](https://reactjs.org/docs/hooks-reference.html)\n- [When to useMemo and useCallback](https://kentcdodds.com/blog/usememo-and-usecallback/)\n- [Cancelling a Promise with React.useEffect](https://juliangaramendy.dev/use-promise-subscription/)",
    "positive_reactions_count": 16,
    "cover_image": null,
    "tag_list": [
      "react",
      "typescript",
      "javascript"
    ],
    "canonical_url": "https://dev.to/juliang/changing-remote-data-with-hooks-565p",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 166736,
    "title": "Loading and Displaying Data with Hooks",
    "description": "In this series, instead of using a state-management library or proposing a one-size-fits-all solution...",
    "published": true,
    "published_at": "2019-09-17T14:31:06.793Z",
    "slug": "loading-and-displaying-data-with-hooks-jlj",
    "path": "/juliang/loading-and-displaying-data-with-hooks-jlj",
    "url": "https://dev.to/juliang/loading-and-displaying-data-with-hooks-jlj",
    "comments_count": 0,
    "public_reactions_count": 50,
    "page_views_count": 9228,
    "published_timestamp": "2019-09-17T14:31:06Z",
    "body_markdown": "**In this series, instead of using a state-management library or proposing a one-size-fits-all solution, we start from the bare minimum and we build up our state management as we need it.**\n\n----\n\n* **In this first article we'll describe how we load and display data with hooks.**\n* In the second article we'll learn how to change remote data with hooks.\n* In the third article we'll see how to share data between components with React Context without using globals, singletons or resorting to state management libraries like MobX or Redux.\n* In the fourth article we'll see how to share data between components using [SWR](https://swr.now.sh/), which is probably what we should have done from the beginning.\n\n\n----\n\nThe final code can be found in this [GitHub repo](https://github.com/JulianG/minimal-state-management-demo). It's TypeScript, but the type annotations are minimal. **Also, please note this is not production code.** In order to focus on state management, many other aspects have not been considered (e.g. [Dependency Inversion](https://en.wikipedia.org/wiki/Dependency_inversion_principle), testing or optimisations).\n\n## Loading Data with Hooks\n\nLet's say we have a REST API with a list of [Commodore 64](https://en.wikipedia.org/wiki/Commodore_64) games. I mean, why not?\n\n**Requirement:** We want to load the list and display the games.\n\n![my favourite commodore 64 games](https://thepracticaldev.s3.amazonaws.com/i/1vp7uggnq1ldbz3iw035.png)\n\n### 1. Basic Fetching\n\nHere's how we retrieve our list of games from the server:\n\n```js\nconst getGames = () =\u003e {\n  return fetch('http://localhost:3001/games/').then(response =\u003e response.json());\n};\n```\n\nWe can use this in a React app. Our first iteration looks like this:\n\n**App.tsx** (rendered by index.tsx) (*[see repo](https://github.com/JulianG/minimal-state-management-demo/tree/01-basic-fetching-2/src)*)\n\n```tsx\nimport React from 'react';\n\nconst getGames = () =\u003e {\n  return fetch('http://localhost:3001/games/').then(response =\u003e response.json());\n};\n\nexport const App = () =\u003e {\n  const [games, setGames] = React.useState([]);\n\n  React.useEffect(() =\u003e {\n    getGames().then(games =\u003e setGames(games));\n  }, []);\n\n  return \u003cpre\u003e{JSON.stringify(games, null, 2)}\u003c/pre\u003e;\n};\n```\n\nOn the first render of our `App` component, the `games` array will be empty. Then when the promise returned by `getGames` resolves, the `games` array contains all our games, and they will be displayed in a very basic manner.\n\n### 2. Custom React Hook\n\nWe can easily extract this to a custom React Hook in a separate file. \n\n**useGames.ts** (*[see repo](https://github.com/JulianG/minimal-state-management-demo/blob/02-custom-react-hook/src)*)\n\n```js\nimport React from 'react';\n\nconst getGames = () =\u003e {\n  return fetch('http://localhost:3001/games/').then(response =\u003e response.json());\n};\n\nexport const useGames = () =\u003e {\n  const [games, setGames] = React.useState([]);\n\n  React.useEffect(() =\u003e {\n    getGames().then(games =\u003e setGames(games));\n  }, []);\n\n  return games;\n};\n```\n\n**App.tsx** (*[see repo](https://github.com/JulianG/minimal-state-management-demo/blob/02-custom-react-hook/src)*)\n\n```tsx\nimport React from 'react';\nimport { useGames } from './useGames';\n\nexport const App = () =\u003e {\n  const games = useGames();\n  return \u003cpre\u003e{JSON.stringify(games, null, 2)}\u003c/pre\u003e;\n};\n```\n\n### 3. Handling errors and pending state\n\nOur custom hook is not handling pending and error states. There is no visual feedback while the data is loading from the server, and even worse: there's no error message when it fails. **If the server is down, the list of games will remain empty, without errors.**\n\nWe can fix this. There are libraries for this, the most popular being [react-async](https://www.npmjs.com/package/react-async); but I don't want to add dependencies just yet. Let's see what's the minimum code needed to handle the  error and pending states.\n\n#### useAsyncFunction\n\nWe write a custom hook that takes an async function (which returns a Promise) and a default value.\n\nThis hook returns a tuple with 3 elements: `[value, error, isPending]`. It calls the async function once*, and it updates the value when it resolves, unless there's an error, of course.\n\n```ts\nfunction useAsyncFunction\u003cT\u003e(asyncFunction: () =\u003e Promise\u003cT\u003e, defaultValue: T) {\n  const [state, setState] = React.useState({\n    value: defaultValue,\n    error: null,\n    isPending: true\n  });\n\n  React.useEffect(() =\u003e {\n    asyncFunction()\n      .then(value =\u003e setState({ value, error: null, isPending: false }))\n      .catch(error =\u003e setState({ ...state, error: error.toString(), isPending: false }));\n  }, [asyncFunction]); // *\n\n  const { value, error, isPending } = state;\n  return [value, error, isPending];\n}\n```\n\n\\* *The `useEffect` inside our `useAsyncFunction` will call the async function once and then every time the `asyncFunction` changes. For more details: [Using the State Hook](https://reactjs.org/docs/hooks-state.html), [Using the Effect Hook](https://reactjs.org/docs/hooks-effect.html), [Hooks API Reference](https://reactjs.org/docs/hooks-reference.html).*\n\nNow in useGames.ts we can simply use this new custom hook, passing the `getGames` function and the initial value of an empty array as arguments.\n\n```js\n...\nexport const useGames = () =\u003e {\n  const games = useAsyncFunction(getGames, []); // 🤔 new array on every render?\n  return games;\n};\n```\n\nThere's a small problem, though. We're passing a new empty array every time `useGames` is called, which is every time our `App` component renders. This causes our data to be re-fetched on every render, but each fetch results in a new render so it results in an infinite loop.\n\nWe can avoid this by storing the initial value in a constant outside the hook:\n\n```js\n...\nconst emptyList = [];\n\nexport const useGames = () =\u003e {\n  const [games] = useAsyncFunction(getGames, emptyList);\n  return games;\n};\n```\n\n#### Small TypeScript Interlude\n\n**You can skip this section if you're using plain JavaScript.** \n\nIf you're using strict TypeScript, the above code will not work because of the \"noImplicitAny\" compiler option. This is because `const emptyList = [];` is implicitly an array of `any`.\n\nWe can annotate it like `const emptyList: any[] = [];` and move on. **But we're using TypeScript for a reason.** That explicit `any` can (and should) be more specific. \n\nWhat are the elements of this list? **Games!** It's a list of games.\n\n```ts\nconst emptyList: Game[] = [];\n```\n\nOf course, now we **have to** define a `Game` type. But do not despair! We have our JSON response from the server where each game object looks like this:\n\n```json\n{\n  \"id\": 5,\n  \"title\": \"Kung-Fu Master\",\n  \"year\": 1984,\n  \"genre\": \"beat'em up\",\n  \"url\": \"https://en.wikipedia.org/wiki/Kung-Fu_Master_(video_game)\",\n  \"status\": \"in-progress\",\n  \"img\": \"http://localhost:3001/img/kung-fu-master.gif\"\n}\n```\n\nWe can use [transform.tools](https://transform.tools/json-to-typescript) to convert that to a TypeScript interface (or type).\n\n```ts\ntype Game = {\n  id: number;\n  title: string;\n  year: number;\n  genre: string;\n  url: string;\n  status: 'not-started' | 'in-progress' | 'finished';\n  img: string;\n};\n```\n\n##### One more thing:\n\nWe said `useAsyncFunction` returned a tuple, but TypeScript's inference (@3.6.2) does not understand that. It inferes the return type as `Array\u003c(boolean | Game[] | null)\u003e`.  We can explicitly annotate the return type of the function to be `[T, string | null, boolean]` where `T` is the (generic) type of the `value`, `(string | null)` is the type of the `error` and `boolean` is `isPending`.\n\n```ts\nexport function useAsyncFunction\u003cT\u003e(\n  asyncFunction: () =\u003e Promise\u003cT\u003e,\n  defaultValue: T\n): [T, string | null, boolean] {\n  ...\n}\n```\n\nNow when we use the function, TypeScript suggests the proper types.\n\n```ts\nconst [games] = useAsyncFunction(getGames, emptyList); // games is of type Game[]\n```\n\nEnd of TypeScript interlude.\n\n#### Composing our custom hooks\n\n**useAsyncFunction.ts** now looks like this:  (*[see repo](https://github.com/JulianG/minimal-state-management-demo/blob/03-handling-error-pending-1/src/useAsyncFunction.ts)*)\n\n```typescript\nimport React from 'react';\n\nexport function useAsyncFunction\u003cT\u003e(\n  asyncFunction: () =\u003e Promise\u003cT\u003e,\n  defaultValue: T\n): [T, string | null, boolean] {\n  const [state, setState] = React.useState({\n    value: defaultValue,\n    error: null,\n    isPending: true\n  });\n\n  React.useEffect(() =\u003e {\n    asyncFunction()\n      .then(value =\u003e setState({ value, error: null, isPending: false }))\n      .catch(error =\u003e\n        setState({ value: defaultValue, error: error.toString(), isPending: false })\n      );\n  }, [asyncFunction, defaultValue]);\n\n  const { value, error, isPending } = state;\n  return [value, error, isPending];\n}\n```\n\nAnd we use it in our `useGames` hook:\n\n**useGames.ts** (*[see repo](https://github.com/JulianG/minimal-state-management-demo/blob/03-handling-error-pending-1/src/useGames.ts)*)\n\n```ts\nimport { useAsyncFunction } from './useAsyncFunction';\n\nconst getGames = (): Promise\u003cGame[]\u003e =\u003e {\n  return fetch('http://localhost:3001/games/').then(response =\u003e response.json());\n};\n\ntype Game = {\n  id: number;\n  title: string;\n  year: number;\n  genre: string;\n  url: string;\n  status: 'not-started' | 'in-progress' | 'finished';\n  img: string;\n};\n\nconst emptyList: Game[] = [];\n\nexport const useGames = () =\u003e {\n  const [games] = useAsyncFunction(getGames, emptyList);\n  return games;\n};\n```\n\n#### Changing UI to display errors and pending states\n\nGreat! But we're stil not handling the error and pending states. We need to change our `App` component:\n\n```tsx\nimport React from 'react';\nimport { useGames } from './useGames';\n\nexport const App = () =\u003e {\n  const { games, error, isPending } = useGames();\n\n  return (\n    \u003c\u003e\n      {error \u0026\u0026 \u003cpre\u003eERROR! {error}...\u003c/pre\u003e}\n      {isPending \u0026\u0026 \u003cpre\u003eLOADING...\u003c/pre\u003e}\n      \u003cpre\u003e{JSON.stringify(games, null, 2)}\u003c/pre\u003e\n    \u003c/\u003e\n  );\n};\n```\n\nAnd our `useGames` hook should return an object with three keys: `games`, `error`, `isPending`.\n\n```ts\nexport const useGames = () =\u003e {\n  const [games, error, isPending] = useAsyncFunction(getGames, emptyList);\n  return { games, error, isPending };\n};\n```\n\nWe're also improving our `getGames` function to handle HTTP status codes different from 200 as errors:\n\n```ts\nconst getGames = (): Promise\u003cGame[]\u003e =\u003e {\n  return fetch('http://localhost:3001/games/').then(response =\u003e {\n    if (response.status !== 200) {\n      throw new Error(`${response.status} ${response.statusText}`);\n    }\n    return response.json();\n  });\n};\n```\n\nOur code so far looks like this: (*[see repo](https://github.com/JulianG/minimal-state-management-demo/tree/03-handling-error-pending-2/src)*).\n\n## Conclusion\n\nWe've seen how to load data from a REST API using React hooks.\n\nIn the [next article](https://dev.to/juliang/changing-remote-data-with-hooks-565p) we'll see how to change remote data using an HTTP `PATCH` request, and how to update our client-side data when the request is successful.\n\n## Resources\n\nFurther reading:\n\n* [Using the State Hook](https://reactjs.org/docs/hooks-state.html)\n* [Using the Effect Hook](https://reactjs.org/docs/hooks-effect.html)\n* [Hooks API Reference](https://reactjs.org/docs/hooks-reference.html)\n* [When to useMemo and useCallback](https://kentcdodds.com/blog/usememo-and-usecallback/)\n* [Cancelling a Promise with React.useEffect](https://juliangaramendy.dev/use-promise-subscription/)",
    "positive_reactions_count": 50,
    "cover_image": null,
    "tag_list": [
      "react",
      "typescript",
      "javascript"
    ],
    "canonical_url": "https://dev.to/juliang/loading-and-displaying-data-with-hooks-jlj",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 157108,
    "title": "A use case for TypeScript Generics",
    "description": "The following may be a bit obvious for some. But something just clicked in my head and I thought I'd...",
    "published": true,
    "published_at": "2019-08-15T10:07:03.276Z",
    "slug": "a-use-case-for-generics-in-typescript-20j7",
    "path": "/juliang/a-use-case-for-generics-in-typescript-20j7",
    "url": "https://dev.to/juliang/a-use-case-for-generics-in-typescript-20j7",
    "comments_count": 6,
    "public_reactions_count": 20,
    "page_views_count": 1708,
    "published_timestamp": "2019-08-15T10:07:03Z",
    "body_markdown": "**The following may be a bit obvious for some.** But something just clicked in my head and I thought I'd write it down.\n\n## When generics are a good idea\n\nImagine we write a function that returns the \"oldest\" item in a set/array:\n\n```ts\nfunction getOldest(items: Array\u003c{ age: number }\u003e) {\n  return items.sort((a, b) =\u003e b.age - a.age)[0];\n}\n```\nThis function can be called with an array of any kind of objects as long as they contain an `age` property of type `number`.\n\nTo help reasoning about it, let's give this a name:\n\n```ts\ntype HasAge = { age: number };\n```\n\nNow our function can be annotated like this:\n\n```ts\nfunction getOldest(items: HasAge[]): HasAge {\n  return items.sort((a, b) =\u003e b.age - a.age)[0];\n}\n```\n\n**Great!** Now we can use this function with any objects that conform to the `HasAge` interface:\n\n```ts\nconst things = [{ age: 10 }, { age: 20 }, { age: 15 }];\nconst oldestThing = getOldest(things);\n\nconsole.log(oldestThing.age); // 20 ✅\n```\nBecause the type of `oldestThing` is inferred to be `HasAge`, we can access its `.age` property.\n\n**But what if we have more complex types?**\n\n```ts\ntype Person = { name: string, age: number};\n\nconst people: Person[] = [\n  { name: 'Amir', age: 10 }, \n  { name: 'Betty', age: 20 }, \n  { name: 'Cecile', age: 15 }\n ];\n\nconst oldestPerson = getOldest(people); // 🙂 no type errors\n```\n\n**This works**, but now the inferred type of `oldestPerson` is `HasAge`. We've lost the `Person` type along the way. As a result we can't (safely) access it's `.name` property.\n\n```ts\nconsole.log(oldestPerson.name); // ❌ type error: Property 'name' does not exist on type 'HasAge'.\n```\n\nAnnotating `oldestPerson:Person` won't work:\n\n```ts\nconst oldestPerson: Person = getOldest(people); // ❌ type error\n// Property 'name' is missing in type 'HasAge' but required in type 'Person'.\n```\n\nWe could use [type assertions](https://www.typescriptlang.org/docs/handbook/basic-types.html#type-assertions), but it's not a good idea. ([why?](https://basarat.gitbooks.io/typescript/docs/types/type-assertion.html#assertion-considered-harmful))\n\n```ts\nconst oldestPerson = getOldest(people) as Person; // 🚩\nconsole.log(oldestPerson.name); // no type error\n```\n\n[You can try this in TypeScript Playground](https://www.typescriptlang.org/play/#code/PTAEHUEsBcAsHsCu1QHECmA7dAnSBjAZwChjoBPAB3VAAkBDQgQQHMaBeUAb1HrYC5QmRAFsARrlABfANykAZokz5okeJlBtoAeQA2AE3SFoAChjoRhQQ2ZsA2gF0AlNcasaXYqFA500RDga5pYAdITwOKYm9AA0oGJOoOwAfPEhfDQAtLzpbE52AAwOclKk+OrGoHCQmCyESaB2PBmCAIwF0nHNAqAATB1SXbw9rQCs0sXE5ZiV8AZG0AAqsDUsDVp6hsYm1bWETnJTFXPoIbrwLCZzW0srtbnoB6AgfR2AoOSkFNSgAAq44RpODxMPQROhBMY8LUZMNwUJRBIcNJDtNKtR4JRdHC-jgAY4GnYvNwhKC4QAiJgiSA4MlxFqgdqdInA0mCMkAIT8FFpsME-SZ3hZYLZAGF0PhIFiefSxtJiJMjjMUNcFus-JsFiZ0ZjHjCXoBeDcAQntCeBVKg0XA4CL1MTIEL20gvVEnM4XK7zYwhEFgp4vQAy5L8rdRIuRQAByb3oMOgfTwIwmlDoAAekFmGi+NDD7noYixYZCjrAqOVHugOIBgnL6jVOlLWvQGKxvrAAYzoEtEWILx+QdwFHDkejqdAVMIhFWoBqZu+YZs7mjtpQvgAjohqeh9JP0+bw1XMPnC6AAKrj2rTmiMQh9tQzMoVEs3Pc1jXbbVN3j1Pd6sD6wCVewneE0eBN0oHB6BUAh0EVcIsVdS4VWMPcvVJZsTXPdscCtHA4kXNCWHgYDQFA8DVHwC0YFgXBiCAA).\n\n## Using Generics\n\n**We can do better.** We can turn this into a [generic](https://www.typescriptlang.org/docs/handbook/generics.html) function.\n\n```ts\nfunction getOldest\u003cT extends HasAge\u003e(items: T[]): T {\n  return items.sort((a, b) =\u003e b.age - a.age)[0];\n}\n\nconst oldestPerson = getOldest(people); // ✅ type Person\n```\n\n**Success!!** Now the inferred type of `oldestPerson` is `Person`!  \nAs a result we can access its `.name` property.\n\nHere's another example with 2 different types:\n\n```ts\ntype Person = {name: string, age: number};\nconst people: Person[] = [\n  { name: 'Amir', age: 10 }, \n  { name: 'Betty', age: 20 }, \n  { name: 'Cecile', age: 15 }\n ];\n\ntype Bridge = {name: string, length: number, age: number};\nconst bridges = [\n{ name: 'London Bridge', length: 269, age: 48 },\n{ name: 'Tower Bridge', length: 244, age: 125 },\n{ name: 'Westminster Bridge', length: 250, age: 269 }\n]\n\nconst oldestPerson = getOldest(people); // type Person\nconst oldestBridge = getOldest(bridges); // type Bridge\n\nconsole.log(oldestPerson.name); // 'Betty' ✅\nconsole.log(oldestBridge.length); // '250' ✅\n```\n\n[You can try this in TypeScript Playground](https://www.typescriptlang.org/play/#code/PTAEFUGcEsDsHNQHECmsUCdoGNICg8AXATwAcVQAJAQ0gEF4KBeUAb1GsYC5RYBXALYAjTKAC+AbgIAzPrGyFoAe1ihGhAPIAbACYpIhADwAVUCgAehNDshVaDFAD4AFNCsDIPYwG0AugEovNjxQUAwUQj4MVTcUDwA6SCUMQmdnagAaUCF-UCZHbPjOCgBaDiLGf28ABl8pMQISclAABUwk1RZ2WGoBFB4DLAQJDm5eQREMcSlsFQNQciVSLX7W9pU-PNBvELZeXtWAIjoBaAxDrOKeAEZq8Qzd7oOeQ4AhCJIL0dWAJjuxB6hJ59F4AYRQ2GgKy+V1A1wArOI8HVGmQKK8sDpGFtgatBnB4CMVghCAALHj8YSYEawymTaZ4WaweZCTGMWwsHZA-Yg0CHAAyKh0KlAGOgWJQX2J8DJPB+ADYAJyXMYAFgAHPdHjyjsYlAB3URiiVStAy8mgH6q1Uq1bXH6IgHanq8w4AdX0hFOzKsU2NjFNJItDuqtrlSqRKMZc0IoCUuk9bQwHS26m0egMzkWyxQ-hGIFATQoSY60Z9cYTBn9zDUEXTnucrPF7LzoALRdFbJQBCZSRW8S0SngznjGcIJZU8RdufzYAA5O9CCQ56BAKDkZb7KAHQ5HlcI1YHZrJrYLc5DK-XQA)\n\n## When generics are not needed\n\nEven if your function takes objects conforming to the `HasAge` interface; as long as you don't mean to  return the same type you don't need generics.\n\n```ts\nfunction isFirstOlder\u003cT extends HasAge\u003e(a: T, b: T) {\n  return a.age \u003e b.age;\n}\n```\n\nThe function above doesn't need to be generic. We can simply write: \n\n```ts\nfunction isFirstOlder(a: HasAge, b: HasAge) {\n  return a.age \u003e b.age;\n}\n```\n\n## Resources\n\n* [Generics](https://www.typescriptlang.org/docs/handbook/generics.html) (TypeScript Handbook)\n* [Type Assertions](https://www.typescriptlang.org/docs/handbook/basic-types.html#type-assertions) (TypeScript Handbook)\n* [Type Assertion](https://basarat.gitbooks.io/typescript/docs/types/type-assertion.html) (Basarat's TypeScript Deep Dive)\n* [TypeScript Playground](https://www.typescriptlang.org/play/)\n\n## Feedback?\n\nI'd love to hear your thoughts. Do you have other use cases? examples?\n\n----\n\nPhoto by [Joshua Coleman](https://unsplash.com/@joshstyle) on [Unsplash](https://unsplash.com/)\n",
    "positive_reactions_count": 20,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--H5eiFVm8--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/992t6q1m8fvupt456fu5.jpg",
    "tag_list": [
      "typescript"
    ],
    "canonical_url": "https://juliangaramendy.dev/when-ts-generics/",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 150071,
    "title": "Should we use \"unknown\" in TypeScript libraries?",
    "description": "I would like to know what you think.   Imagine I'm writing a package using TypeScript 3. I c...",
    "published": true,
    "published_at": "2019-07-30T09:07:17.552Z",
    "slug": "should-we-use-unknown-in-typescript-libraries-2om2",
    "path": "/juliang/should-we-use-unknown-in-typescript-libraries-2om2",
    "url": "https://dev.to/juliang/should-we-use-unknown-in-typescript-libraries-2om2",
    "comments_count": 1,
    "public_reactions_count": 7,
    "page_views_count": 384,
    "published_timestamp": "2019-07-30T09:07:17Z",
    "body_markdown": "## I would like to know what you think.\n\nImagine I'm writing a package using TypeScript 3. I can use the the `unknown` type as I please:\n\n```ts\nexport function getBanana(): unknown {\n  return 'Banana'\n}\n```\n\nI know this doesn't make any sense, but...\n\nImagine I \"publish\" this `\"banana\"` package, generating JavaScript code and declaration files (.d.ts). My index.d.ts looks like this:\n\n```ts\nexport declare function getBanana(): unknown;\n```\n\nI can now import this function into a Javascript project without issues:\n\n```js\nimport { getBanana } from 'banana'\nconst b = getBanana()\nconsole.log(b.banana)\n```\n\nI can also import it into a TypeScript 3 project without issues.\n\n### But what about a TypeScript 2 project?\n\nOh no\n\n```log\n../banana/dist/src/index.d.ts(1,38): error TS2304: Cannot find name 'unknown'.\n```\n\nThis can be fixed by [using a custom d.ts](https://stackoverflow.com/questions/41558661/ignore-bundled-d-ts-and-use-external-declarations/41559327#41559327) that changes \"unknown\" to \"any\", but that's beyond my point.\n\n## Should I export unknown?\n\nI started wondering if exporting any variables or functions featuring `unknown` is recommended.\n\n1. TypeScript 2 projects need to workaround it.\n2. Why `unknown`? Can't my library narrow the type down to something \"less unknown\"?\n\n## What do you think?\n\n\n",
    "positive_reactions_count": 7,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--U9JDEiTu--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/w5pwq6ez9ncu6xcheu9b.png",
    "tag_list": [
      "discuss",
      "typescript"
    ],
    "canonical_url": "https://dev.to/juliang/should-we-use-unknown-in-typescript-libraries-2om2",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    },
    "flare_tag": {
      "name": "discuss",
      "bg_color_hex": "#000000",
      "text_color_hex": "#FFFFFF"
    }
  },
  {
    "type_of": "article",
    "id": 142389,
    "title": "Catching bugs with stricter TypeScript",
    "description": "We recently enabled \"noImplicitAny\" in a relatively old TypeScript project. It resulted in 269 new er...",
    "published": true,
    "published_at": "2019-07-19T08:21:23.099Z",
    "slug": "catching-bugs-with-stricter-typescript-13oa",
    "path": "/juliang/catching-bugs-with-stricter-typescript-13oa",
    "url": "https://dev.to/juliang/catching-bugs-with-stricter-typescript-13oa",
    "comments_count": 5,
    "public_reactions_count": 13,
    "page_views_count": 262,
    "published_timestamp": "2019-07-19T08:21:23Z",
    "body_markdown": "We recently enabled `\"noImplicitAny\"` in a relatively old TypeScript project. It resulted in 269 new errors. Most of those were missing type annotations but in a few cases, we found problems with the code. These had been around for months and were not caught by our test suite.\n\n### TL;DR;\n\nWe should prefer strict TypeScript configurations to catch issues, not just at compile-time, but (with a good IDE) **as we type**.\n\nWe should try to keep up-to-date with TypeScript versions to benefit from the ever-improving error messages; saving development time.\n\n## The case of the message id\n\nWe had an object specifying one message for each key. This was working before \"noImplicitAny\", but now we get an error:\n\n```ts\n  const id = getMessageIdFromSomeObscureLogic();\n\n  const messages = {\n    success: \"Everything is awesome!\",\n    warning: \"Something is not entirely correct.\",\n    error: \"An error was found. We can' go on.\",\n    bananas: \"Do you like bananas?\",\n    example: \"I'm running out of ideas for examples.\",\n    typescript: \"Something to do with TypeScript\",\n    javascript: \"Something to do with JavaScript\"\n  };\n  const message = messages[id]; // ERROR! (see below)\n}\n```\nThe TS error reads:\n\u003cpre\u003e\nElement implicitly has an 'any' type because type '{ success: string; warning: string; error: string; example: string; typescript: string; javascrip...' has no index signature.\n\u003c/pre\u003e\n\nThe problem here is that the keys of the `messages` object must be either 'success' or 'warning' or 'error' or 'example', etc. It can't just be \"any string\". \n\nWe can fix this in a few ways:\n\n### Index signature \"fix\"\n\nThe error message mentions \"index signature\". We can explicitly expand the type declaration to accept any strings as keys, like this:\n\n```ts\nconst messages: {[index: string]: string} = {\n  success: \"Everything is awesome!\",\n  warning: \"Something is not entirely correct.\",\n  error: \"An error was found. We can' go on.\",\n  bananas: \"Do you like bananas?\",\n  example: \"I'm running out of ideas for examples.\",\n  typescript: \"Something to do with TypeScript\",\n  javascript: \"Something to do with JavaScript\"\n};\n\nconst message = messages[id]; // no error\n```\n\n### Type-casting \"fix\"\n\nWe can turn the \"implicit any\" into an \"explicit any\" like this:\n\n```ts\nconst message = (messages as any)[id]; // no error\n```\n\nThat gets rid of the error, but the inferred type of `message` is `any`.\n\nThere's another way:\n\n```ts\nconst message = (messages)[id as keyof typeof messages]; // no error\n```\n\nNow the inferred type of `message` is `string`. Much better, but only because we're telling TypeScript \"trust me, this is a valid key\".\n\n**But... Are we sure it is valid?**\n\n### The proper fix\n\nWe looked at the type of our `id`, and it wasn't `string` at all.\n\nRemember that it was being obtained from some obscure logic.\n\n```ts\n  const id = getMessageIdFromSomeObscureLogic();\n```\n\nIt turned out that the type of `id` was being inferred to a union type like this: `'success' | 'warning' | 'error' | 'example' | 'banana' | 'typescript' | 'javascript'`\n\nSo this was already strongly typed. Why are we getting an error?\n\nIt turns the `messages` object was missing the `banana` key.\n\n**This was a bug!** Caught by making the TypeScript configuration a little bit stricter.\n\n### Conclusion\n\nIncreasing the \"strictness\" of our TypeScript configuration can help us catch issues at compile time which otherwise would have happened live or (if we're lucky) in our tests.\n\nAlso, updating our TypeScript version can help a lot. For instance, the initial error we got with TypeScript 3.3 was:\n\n\u003cpre\u003e\nElement implicitly has an 'any' type because type '{ success: string; warning: string; error: string; example: string; typescript: string; javascrip...' has no index signature.\n\u003c/pre\u003e\n\nBut with TypeScript 3.5 it's a lot more helpful, especially the second paragraph where it mentions the `'banana'` property we were missing:\n\n\u003cpre\u003e\nElement implicitly has an 'any' type because expression of type '\"success\" | \"warning\" | \"error\" | \"example\" | \"typescript\" | \"javascript\" | \"banana\"' can't be used to index type '{ success: string; warning: string; error: string; example: string; typescript: string; javascript: string; }'.\n\nProperty 'banana' does not exist on type '{ success: string; warning: string; error: string; example: string; typescript: string; javascript: string; }'.\n\u003c/pre\u003e\n\nThat would have saved us quite some time.\n\n----\n\nPhoto by [Pete Hardie](https://unsplash.com/@pjhardie) on [Unsplash](https://unsplash.com/photos/Peyb6JQPGNU)\n\n",
    "positive_reactions_count": 13,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--3Ultc_5X--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/pvvwlpms5awj074ritd5.jpg",
    "tag_list": [
      "typescript"
    ],
    "canonical_url": "https://juliangaramendy.dev/no-implicit-any/",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 127010,
    "title": "Configuring Prettier and TypeScript Compiler as a Pre-commit Hook",
    "description": "We can easily improve our developer experience by:   Preventing broken code being committed/pushed....",
    "published": true,
    "published_at": "2019-06-22T21:00:02.915Z",
    "slug": "configuring-prettier-and-typescript-compiler-as-a-pre-commit-hook-44jh",
    "path": "/juliang/configuring-prettier-and-typescript-compiler-as-a-pre-commit-hook-44jh",
    "url": "https://dev.to/juliang/configuring-prettier-and-typescript-compiler-as-a-pre-commit-hook-44jh",
    "comments_count": 3,
    "public_reactions_count": 10,
    "page_views_count": 3975,
    "published_timestamp": "2019-06-22T21:00:02Z",
    "body_markdown": "![Photo by Simon Wilkes on Unsplash](https://juliangaramendy.dev/static/0312a265e071f31a3a88a9e94b493af5/b04ab/simon-wilkes-691856-unsplash.jpg)\n\n\nWe can easily improve our developer experience by:\n* Preventing broken code being committed/pushed.\n* Avoiding pointless arguments about formatting in our code reviews.\n\nWe decided to use [git pre-commit hooks](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks) to help prevent \"broken\" commits.\n\nWe started from an existing TypeScript project, but here's a [demo repository](https://github.com/JulianG/precommit-hooks-demo) if you want to have a look.\n\n## 1. Install [prettier](https://www.npmjs.com/package/prettier), [husky](https://www.npmjs.com/package/husky) and [lint-staged](https://www.npmjs.com/package/lint-staged)\n\n```js\nyarn add -D prettier husky lint-staged\n```\nNone of these are required at run time so it's important to use `-D` so that the dependencies are added to \"devDependencies\".\n\n## 2. Configure prettier \n\nWe need to create two files: \n### .prettierrc:\n\n```js\n{\n  \"printWidth\": 120,\n  \"proseWrap\": \"preserve\",\n  \"semi\": false,\n  \"singleQuote\": true,\n  \"useTabs\": false,\n  \"tabWidth\": 2,\n  \"arrowParens\": \"avoid\",\n  \"trailingComma\": \"es5\"\n}\n```\n\n### .prettierignore:\n\n```js\nnode_modules\nbuild\ndist\nres\ncoverage\n```\nYou can of course configure this in [any way you like](https://prettier.io/docs/en/configuration.html).\n\n## 3. Create a lint-staged config file: .lintstagedrc:\n\n```js\n{\n  \"**/*.+(js|jsx|css|less|scss|ts|tsx|md)\": [\n    \"prettier --write\",\n    \"git add\"\n  ]\n}\n```\nThis is configured to run prettier and overwrite any **staged files** that match the pattern above and then staging the new changes (if any). \n\n## 4. Create a husky config file: .huskyrc:\n\n```js\n{\n  \"hooks\": {\n    \"pre-commit\": \"tsc \u0026\u0026 lint-staged\"\n  }\n}\n```\n\nThis is configuring the pre-commit hook. It will run **`tsc`** and then **`lint-staged`** using the configuration files discussed above.\n\n## 5. Success!\n\nNow every time I try to commit, the pre-commit hook will run.\nIf -for some reason- my code doesn't compile I'll get an error and a chance to fix it before committing.\n\nAnd I don't have to worry about code formatting because **`prettier`** will format any staged files before committing.\n\n## Demo Repository\n\nI've setup a very basic [repository](https://github.com/JulianG/precommit-hooks-demo) on GitHub as a demo.\n\n----\n\nPhoto by [Simon Wilkes](https://unsplash.com/@simonfromengland) on [Unsplash](https://unsplash.com/search/photos/stream)",
    "positive_reactions_count": 10,
    "cover_image": null,
    "tag_list": [
      "typescript",
      "prettier",
      "git"
    ],
    "canonical_url": "https://juliangaramendy.dev/prettier-pre-commit-hook/",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 108745,
    "title": "Publishing a React Hooks Library using Typescript and TSDX",
    "description": "I started my personal hooks library and decided to publish it as an npm package. ...",
    "published": true,
    "published_at": "2019-05-15T10:27:28.707Z",
    "slug": "publishing-a-react-hooks-library-using-typescript-and-tsdx-36cg",
    "path": "/juliang/publishing-a-react-hooks-library-using-typescript-and-tsdx-36cg",
    "url": "https://dev.to/juliang/publishing-a-react-hooks-library-using-typescript-and-tsdx-36cg",
    "comments_count": 5,
    "public_reactions_count": 37,
    "page_views_count": 2531,
    "published_timestamp": "2019-05-15T10:27:28Z",
    "body_markdown": "I started my personal hooks library and decided to publish it as an **npm package**. Doing this in TypeScript was not straightforward, until: **[palmerhq/tsdx](https://github.com/palmerhq/tsdx)**.  \n\nHere's what I did. Step by step.\n\n## Step 1: Creating the project\n\n```js\n$ npx tsdx create bananahooks\n```\n\nThe command is interactive and asks you to choose a template.\n\n```\n? Choose a template …\n  basic\n❯ react\n```\n\nI selected the `react` template, and TSDX installed everything for me.\n\n```\n✔ Choose a template · react\n✔ Created bananahooks\n✔ Installed dependecines\n\n  Awesome! You're now ready to start coding.\n\n  I already ran yarn install for you, so your next steps are:\n    cd bananahooks\n\n  To start developing (rebuilds on changes):\n    yarn start\n\n  To build for production:\n    yarn build\n\n  To test your library with Jest:\n    yarn test\n\n  Questions? Feedback? Please let me know!\n  https://github.com/jaredpalmer/tsdx/issues\n```\n\n## Step 2: Adding code and tests\n\nTSDX generates an `index.tsx` file a test file, and an example folder.  \nI deleted the example folder, added my [own code](https://github.com/JulianG/hooks/tree/master/src) and [tests](https://github.com/JulianG/hooks/tree/master/test).\n\n```\nbananahooks                      bananahooks\n└─ examples                      └─ src\n└─ src                              └─ index.tsx\n   └─ index.tsx                     └─ use-promise.tsx\n└─ test                          └─ test\n   └─ blah.test.tsx     ==\u003e         └─ use-promise.test.tsx\n└─ .gitignore                    └─ .gitignore\n└─ package.json                  └─ package.json\n└─ README.md                     └─ README.md\n└─ tsconfig.json                 └─ tsconfig.json\n└─ yarn.lock                     └─ yarn.lock\n```\n\nBecause my library consists of only functions, I decided to delete the `example` folder, and I relied on tests instead. You can see how I test my custom hook in [use-promise.test.tsx](https://github.com/JulianG/hooks/blob/master/test/use-promise.test.tsx). I'm using [react-testing-library](https://github.com/testing-library/react-testing-library).\n\n## Step 4: Testing the package locally\n\nTo make sure my package would work as expected I imported it to a new React project:\n\n```\nyarn add ../path/to/bananahooks\n```\n\nBut there was a problem!\n\n```error\nInvalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.\n```\n\nThere's a [known issue](https://github.com/yarnpkg/yarn/issues/1334) when installing local packages with **yarn** or **npm**. Everything is copied to the project's `node_modules` folder instead of just the files that would eventually be packaged. This means there's now two `node_modules` and therefore, two copies of React. It doesn't matter if it's the exact same version.  \n\nThe workaround is to `yarn remove bananahooks`, then delete the `node_modules` folder from the library project, then run `yarn add ../path/to/bananahooks` again. It's annoying.\n\n## Step 5: Publishing to NPM\n\nTSDX generated a `package.json` file with my package name: `bananahooks`, but I had to add the `author`, `license` and `repository` keys to it:\n\n```json\n  \"author\": {\n    \"name\": \"Julian Garamendy\",\n    \"email\": \"me@juliangaramendy.dev\",\n    \"url\": \"https://juliangaramendy.dev\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/JulianG/hooks\"\n  },\n  \"license\": \"MIT\",\n```\n\nI ran the `npm pack` command which generates a `.tgz` file with the package that would be uploaded to the registry. I find this useful to inspect and make sure I'm including the right files. **The `.tgz` file can be deleted afterwards; it's not needed for publishing.**\n\nThen I ran `npm publish` and ([because I'm already logged in to npm](https://docs.npmjs.com/cli/adduser)) my package was uploaded and added to the registry.\n\nI can later increase the version number either by manually editing the `package.json` file or by running [`npm version`](https://docs.npmjs.com/cli/version.html).\n\n## Conclusion\n\n**[TSDX](https://github.com/palmerhq/tsdx)** makes creating TypeScript libraries really easy. I'll sure be using it a lot in the future.\n\nYou can see [my hooks repository on GitHub](https://github.com/JulianG/hooks), and the published [bananahooks](https://www.npmjs.com/package/bananahooks) package on NPM.\n\nI hope this was useful.\n\n",
    "positive_reactions_count": 37,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--Yu9cpra2--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/byrvovvrgoxl8zr9foe0.png",
    "tag_list": [
      "react",
      "hooks",
      "typescript",
      "npm"
    ],
    "canonical_url": "https://juliangaramendy.dev/react-typescript-library-tsdx/",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 97990,
    "title": "Cancelling a Promise with React.useEffect",
    "description": "How to properly subscribe and, more importantly, unsubscribe from a Promise with React.useEffect",
    "published": true,
    "published_at": "2019-04-08T00:00:00.000Z",
    "slug": "cancelling-a-promise-with-react-useeffect-3062",
    "path": "/juliang/cancelling-a-promise-with-react-useeffect-3062",
    "url": "https://dev.to/juliang/cancelling-a-promise-with-react-useeffect-3062",
    "comments_count": 2,
    "public_reactions_count": 12,
    "page_views_count": 2162,
    "published_timestamp": "2019-04-08T00:00:00Z",
    "body_markdown": "---\r\ntitle: Cancelling a Promise with React.useEffect\r\ndescription: How to properly subscribe and, more importantly, unsubscribe from a Promise with React.useEffect\r\ndate: '2019-04-08'\r\ntype: 'blog-post'\r\npublished: true\r\ntags: react, javascript\r\ncanonical_url: https://juliangaramendy.dev/use-promise-subscription/\r\n---\r\n\r\n![Origami](https://thepracticaldev.s3.amazonaws.com/i/xu5nsiism7ytrcyaqjal.jpg)\r\n\r\nI've seen it done in complicated ways so I have to write this down.\r\n\r\n## Quick Example\r\n\r\n```js\r\nfunction BananaComponent() {\r\n\r\n  const [bananas, setBananas] = React.useState([])\r\n  \r\n  React.useEffect(() =\u003e {\r\n    let isSubscribed = true\r\n    fetchBananas().then( bananas =\u003e {\r\n      if (isSubscribed) {\r\n        setBananas(bananas)\r\n      }\r\n    })\r\n    return () =\u003e isSubscribed = false\r\n  }, []);\r\n\r\n  return (\r\n    \u003cul\u003e\r\n    {bananas.map(banana =\u003e \u003cli\u003e{banana}\u003c/li\u003e)}\r\n    \u003c/ul\u003e\r\n  )\r\n}\r\n```\r\n\r\nIn the code above, the `fetchBananas` function returns a promise. We can \"cancel\" the promise by having a conditional in the scope of `useEffect`, preventing the app from setting state after the component has unmounted.\r\n\r\n## Long Explanation\r\n\r\nImagine we have a REST API endpoint that gives us a list of bananas. We can get the list by [using `fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch) which returns a promise. We wrap the call in a nice async function which naturally returns a promise.\r\n\r\n```js\r\nasync function fetchBananas() {\r\n\r\n  return fetch('/api/bananas/')\r\n    .then(res =\u003e {\r\n      if (res.status \u003e= 400) {\r\n        throw new Error(\"Bad response from server\")\r\n      }\r\n    })\r\n    .then(res =\u003e {\r\n      return res.data\r\n    })\r\n\r\n}\r\n```\r\n\u003cbr/\u003e\r\n\r\nNow we want to render some bananas in a React function component. In a traditional class component we would make the async call in `componentWillMount` or `componentDidMount`, but with function components we need to use the [`useEffect`](https://reactjs.org/docs/hooks-effect.html) hook.\r\n\r\n\u003e Mutations, subscriptions, timers, logging, and other side effects are not allowed inside the main body of a function component (referred to as React’s render phase). Doing so will lead to confusing bugs and inconsistencies in the UI. ([reacjs docs](https://reactjs.org/docs/hooks-reference.html#useeffect))\r\n\r\nOur `BananaComponent` would look like this:\r\n\r\n```js\r\nfunction BananaComponent() {\r\n\r\n  const [bananas, setBananas] = React.useState([])\r\n  \r\n  React.useEffect(() =\u003e {\r\n    fetchBananas().then(setBananas)\r\n  }, []);\r\n\r\n  return (\r\n    \u003cul\u003e\r\n    {bananas.map(banana =\u003e \u003cli\u003e{banana}\u003c/li\u003e)}\r\n    \u003c/ul\u003e\r\n  )\r\n}\r\n```\r\n\r\nWith `useState([])` we define an initial value of for `bananas` so we can render an empty list while the promise is pending. The `useEffect` function takes two arguments: the first one is the effect function, and the second is the \"dependencies\" or \"inputs\". Our effect function \"subscribes\" to the promise. For our second argument we pass an empty array so that the effect only runs once. Then, when the data is retrieved, the promise resolves, and our `useEffect` calls `setBananas`, which causes our function component to re-render, this time with some bananas in the array.\r\n\r\n## Wait! Is that it?\r\n\r\n**Unfortunately not.** Our component \"subscribes\" to the promise, but it never \"unsubscribes\" or cancels the request. If for any reason, our component is unmounted before the promise resolves, our code will try to \"set state\" (calling `setBananas`) on an unmounted component. This will throw a warning:\r\n\r\n```log\r\nWarning: Can't perform a React state update on an unmounted component.\r\nThis is a no-op, but it indicates a memory leak in your application.\r\nTo fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.\r\n```\r\n\r\nWe can fix this by cancelling our request when the component unmounts. In function components, this is done [in the cleanup function of `useEffect`](https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup).\r\n\r\n```js\r\n  ...\r\n\r\n  React.useEffect(() =\u003e {\r\n    fetchBananas().then(setBananas)\r\n    return () =\u003e someHowCancelFetchBananas! \u003c\u003c\u003c\u003c\u003c\u003c\r\n  }, []);\r\n\r\n  ...\r\n\r\n```\r\n\u003cbr/\u003e\r\n\r\n**But we can't cancel a promise**. What we can do is prevent our code from setting state if the component has been unmounted.\r\n\r\nIn the past there was `isMounted`, but as it turns out, [it's an anti-pattern](https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html). With class components we could get away with implementing our own `this._isMounted`; but in function components there are no instance variables.\r\n\r\nI've seen some implementations using `useRef` to keep a `mountedRef`.  \r\n**But there's an easier way.**\r\n\r\nTaking advantage of [closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) we can keep an `isSubscribed` boolean inside `useEffect`.\r\n\r\n```js\r\nfunction BananaComponent() {\r\n\r\n  const [bananas, setBananas] = React.useState([])\r\n  \r\n  React.useEffect(() =\u003e {\r\n    let isSubscribed = true\r\n    fetchBananas().then( bananas =\u003e {\r\n      if (isSubscribed) {\r\n        setBananas(bananas)\r\n      }\r\n    })\r\n    return () =\u003e isSubscribed = false\r\n  }, []);\r\n\r\n  ...\r\n\r\n```\r\n\r\nWe start with `isSubscribed` set to `true`, then we add a conditional before calling `setBananas` and finally, we set `isSubscribed` to `false` in the cleanup function.\r\n\r\n## Is that it?\r\n\r\n**YES**; that's all we need.\r\n\r\nWe can improve the above code by handling the promise being pending, and when it's rejected.\r\n\r\n```js\r\nfunction BananaComponent() {\r\n\r\n  const [bananas, setBananas] = React.useState(undefined);\r\n  const [error, setError] = React.useState('');\r\n  \r\n  React.useEffect(() =\u003e {\r\n    let isSubscribed = true;\r\n    fetchBananas()\r\n      .then(bananas =\u003e (isSubscribed ? setBananas(bananas) : null))\r\n      .catch(error =\u003e (isSubscribed ? setError(error.toString()) : null));\r\n\r\n    return () =\u003e (isSubscribed = false);\r\n  }, []);\r\n\r\n  render (\r\n    \u003cul\u003e\r\n    {!error \u0026\u0026 !bananas \u0026\u0026 \u003cli className=\"loading\"\u003eloading...\u003c/li\u003e)}\r\n    {!error \u0026\u0026 bananas \u0026\u0026 bananas.map(banana =\u003e \u003cli\u003e{banana}\u003c/li\u003e)}\r\n    {error \u0026\u0026 \u003cli className=\"error\"\u003e{error}\u003c/li\u003e}\r\n    \u003c/ul\u003e\r\n  )\r\n}\r\n```\r\n\u003cbr/\u003e\r\n\r\n## Or even better...\r\n\r\nWe can create a **custom hook** where we return a tuple like `[value, error, isPending]`.\r\n\r\nIn the implementation below, the consumer doesn't need to keep its own state, and the 'pending' state is explicit.\r\n\r\n```js\r\nexport function usePromiseSubscription(promiseOrFunction, defaultValue, deps) {\r\n  const [state, setState] = React.useState({ value: defaultValue, error: null, isPending: true })\r\n\r\n  React.useEffect(() =\u003e {\r\n    const promise = (typeof promiseOrFunction === 'function')\r\n      ? promiseOrFunction()\r\n      : promiseOrFunction\r\n\r\n    let isSubscribed = true\r\n    promise\r\n      .then(value =\u003e isSubscribed ? setState({ value, error: null, isPending: false }) : null)\r\n      .catch(error =\u003e isSubscribed ? setState({ value: defaultValue, error: error, isPending: false }) : null)\r\n\r\n    return () =\u003e (isSubscribed = false)\r\n  }, deps)\r\n\r\n  const { value, error, isPending } = state\r\n  return [value, error, isPending]\r\n}\r\n```\r\n\r\nUsage:\r\n\r\n```js\r\nfunction BananaComponent() {\r\n\r\n  const [bananas, error, pending] = usePromiseSubscription(fetchBananas, [], [])\r\n\r\n  render (\r\n    \u003cul\u003e\r\n    {pending \u0026\u0026 \u003cli className=\"loading\"\u003eloading...\u003c/li\u003e)}\r\n    {!pending \u0026\u0026 !error \u0026\u0026 bananas.map(banana =\u003e \u003cli\u003e{banana}\u003c/li\u003e)}\r\n    {error \u0026\u0026 \u003cli className=\"error\"\u003e{error}\u003c/li\u003e}\r\n    \u003c/ul\u003e\r\n  )\r\n}\r\n```\r\n\r\nI hope this was useful.\r\n\r\n## Questions? Comments?\r\n\r\nI would love to hear your thoughts. \r\n\r\n* Can you see anything wrong with this approach?\r\n* Is this better than what you were doing before? \r\n* Is it worse?\r\n* I'm not entirely happy with the `[value, error, isPending]` tuple. Can you think of a better \"API\" for this?\r\n\r\n----\r\n\r\nThis article was originally posted in my personal blog: https://juliangaramendy.dev/use-promise-subscription/\r\n\r\n----\r\n\r\nPhoto by [Alex](https://unsplash.com/photos/ZR48YvUpk04?utm_source=unsplash\u0026utm_medium=referral\u0026utm_content=creditCopyText) on [Unsplash](https://unsplash.com)",
    "positive_reactions_count": 12,
    "cover_image": null,
    "tag_list": [
      "react",
      "javascript"
    ],
    "canonical_url": "https://juliangaramendy.dev/use-promise-subscription/",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 88056,
    "title": "Testing Opinions",
    "description": "Testing the output of a function is not the same as testing its implementation details.",
    "published": true,
    "published_at": "2019-03-04T06:43:21.951Z",
    "slug": "testing-opinions-3hlh",
    "path": "/juliang/testing-opinions-3hlh",
    "url": "https://dev.to/juliang/testing-opinions-3hlh",
    "comments_count": 1,
    "public_reactions_count": 2,
    "page_views_count": 211,
    "published_timestamp": "2019-03-04T06:43:21Z",
    "body_markdown": "---\r\ntitle: Testing Opinions\r\npublished: true\r\ndescription: Testing the output of a function is not the same as testing its implementation details.\r\ntags: testing, react, jest\r\n---\r\n\r\n**⚠️ Warning! This article is highly opinionated.**\r\n\r\nIt happens often at work that my colleagues and I discuss the best way or the proper way to test a specific React component. **We don't always agree.**\r\n\r\n\u003e Testing the output of a function is not the same as testing its implementation details.\r\n\r\n## Avoid Testing Implementation Details\r\n\r\n(Almost) all of us agree that [testing implementation details](https://kentcdodds.com/blog/testing-implementation-details) should be avoided. The problem sometimes is to agree to a definition of implementation details.\r\n\r\nImagine we have a `\u003cBanana\u003e` component (of course).\r\n\r\n```js\r\nexport function Banana({ type, color, length }) {\r\n  return (\r\n    \u003cdiv className=\"banana\"\u003e\r\n      \u003cBananaType type={type} /\u003e\r\n      \u003cBananaColor color={color} /\u003e\r\n      \u003cBananaLength length={length} /\u003e\r\n    \u003c/div\u003e\r\n  );\r\n}\r\n```\r\n\r\nUnit test purists would argue we need to test each component in isolation. For the `\u003cBanana\u003e` component isolation we need to either mock the children or do a shallow render and see how it sets the props in its children. More or less like this:\r\n\r\n```js\r\n  it(\"renders a banana properly\", () =\u003e {\r\n    const banana = { type: \"Cavendish\", color: \"yellow\", length: 12 };\r\n    const wrapper = shallow(\u003cBanana {...banana} /\u003e); // from 'enzyme'\r\n\r\n    const bananaType = wrapper.find(BananaType); // from 'enzyme'\r\n    const bananaColor = wrapper.find(BananaColor);\r\n    const bananaLength = wrapper.find(BananaLength);\r\n\r\n    // make sure each child has the correct props\r\n    expect(bananaType.props()).toHaveProperty(\"type\", \"Cavendish\");\r\n    expect(bananaColor.props()).toHaveProperty(\"color\", \"yellow\");\r\n    expect(bananaLength.props()).toHaveProperty(\"length\", 12);\r\n    // 🤔\r\n  });\r\n```\r\n### What's the problem here?\r\n\r\n1. The test tries to find `BananaType`, `BananaColor` and `BananaLength` which are implementation dependencies of the subject.\r\n2. The test expects certain props to be set on the internal children; again: implementation details.\r\n\r\n### What can we do instead?\r\n\r\nOur `\u003cBanana\u003e` component **owns** those three sub components, so the \"subject under test\" can be considered to be the entire thing: the component and its children. \r\n\r\nI prefer to \"render\" the component and inspect its output.\r\n\r\n```js\r\n  it(\"renders a banana properly\", () =\u003e {\r\n    const banana = { type: \"Cavendish\", color: \"yellow\", length: 12 };\r\n\r\n    const {\r\n      getByText\r\n    } = render(\u003cBanana {...banana} /\u003e); // from 'react-testing-library'\r\n    \r\n    getByText('Cavendish Banana');\r\n    getByText('yellow');\r\n    getByText('12cm');\r\n  });\r\n```\r\n\u003cbr/\u003e\r\n\r\nIn some cases a [snapshot](https://jestjs.io/docs/en/snapshot-testing.html) test may be better:\r\n\r\n```js\r\n  it(\"renders a banana properly\", () =\u003e {\r\n    const banana = { type: \"Cavendish\", color: \"yellow\", length: 12 };\r\n    const result = render(\u003cBanana {...banana} /\u003e); // from 'react-testing-library'\r\n    expect(result.container).toMatchSnapshot();\r\n  });\r\n```\r\n\r\n### Wait! Don't snapshot tests depend on implementation details?\r\n\r\nSome argue that testing against the rendered output (i.e. snapshot test) is similar to testing implementation details. For instance suppose our `\u003cBanana\u003e` component changes its implementation and instead of rendering `\u003cBananaLength\u003e` it renders `\u003cdiv class=\"banana-length\"\u003e12 cm\u003c/div\u003e` (notice the space between '12' and 'cm'). Then my tests above would fail.\r\n\r\nBut I consider the rendered markup to be the function's output, not it's implementation details. If the render changes, then the output of my module changes, then **the tests must break**. \r\n\r\n\r\n### About react-testing-library\r\n\r\nI'm using [reac-testing-library](https://testing-library.com/react) in some projects. But the first example was using [Enzyme](https://airbnb.io/enzyme/) instead. Of course, you can avoid testing implementation details with Enzyme, but I think react-testing-library makes it easier to avoid those bad practices.\r\n\r\nMy opinions are probably biased because I've been following Kent C. Dodds' [testing javascript](https://testingjavascript.com/) course.\r\n\r\nFeel free to disagree with me in the comments.\r\n",
    "positive_reactions_count": 2,
    "cover_image": null,
    "tag_list": [
      "testing",
      "react",
      "jest"
    ],
    "canonical_url": "https://dev.to/juliang/testing-opinions-3hlh",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    }
  },
  {
    "type_of": "article",
    "id": 87907,
    "title": "Adding custom OpenGraph images to Gatsby Starter Blog",
    "description": "I have a blog based on the Gatsby Starter Blog, but I want my posts to have a nice image when sharing them on social media.",
    "published": true,
    "published_at": "2019-03-03T17:37:50.864Z",
    "slug": "adding-custom-opengraph-images-to-gatsby-starter-blog-66k",
    "path": "/juliang/adding-custom-opengraph-images-to-gatsby-starter-blog-66k",
    "url": "https://dev.to/juliang/adding-custom-opengraph-images-to-gatsby-starter-blog-66k",
    "comments_count": 0,
    "public_reactions_count": 5,
    "page_views_count": 107,
    "published_timestamp": "2019-03-03T17:37:50Z",
    "body_markdown": "---\r\ntitle: Adding custom OpenGraph images to Gatsby Starter Blog\r\npublished: true\r\ndescription: I have a blog based on the Gatsby Starter Blog, but I want my posts to have a nice image when sharing them on social media.\r\ncanonical_url: https://juliangaramendy.dev/custom-open-graph-images-in-gatsby-blog/\r\ntags: gatsby, blog, opengraph, social\r\n---\r\n\r\nI have a blog based on the [Gatsby Starter Blog](https://www.gatsbyjs.org/starters/gatsbyjs/gatsby-starter-blog/) without any modifications.\r\n\r\n## The Problem\r\n\r\nI want my posts to have a nice image when sharing them on social media. \r\n\r\nA simple inspection of the generated HTML reveals that the Gatsby Blog renders (amongst others) the following [meta tags](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta):\r\n\r\n```html\r\n\u003cmeta property=\"description\" ... /\u003e\r\n\u003cmeta property=\"og:title\" ... /\u003e\r\n\u003cmeta property=\"og:description\" ... /\u003e\r\n\u003cmeta property=\"og:type \" ... /\u003e\r\n\u003cmeta property=\"twitter:title\" ... /\u003e\r\n\u003cmeta property=\"twitter:description\" ... /\u003e\r\n```\r\n\r\nIt doesn't render `og:image`, `image` nor `twitter:image`, which are needed to properly share the articles on Twitter, Facebook, and other websites using [Open Graph](http://ogp.me/).\r\n\r\nTo see what our blog post link will look like on social media we can use [Twitter Card Validator](https://cards-dev.twitter.com/validator), [Facebook Sharing Debugger](https://developers.facebook.com/tools/debug/), or we can simply read the Open Graph metadata using [Open Graph Check](https://opengraphcheck.com/).\r\n\r\n![Twitter Card Validator](https://thepracticaldev.s3.amazonaws.com/i/lddorkuvt2lgu9xoivhg.png)\r\n\r\n## The Requirement\r\n\r\nWe want to have a default (or fallback image) for the blog's home page and have the option to specify a custom image (even if it's not in the article's body).\r\n\r\n## The Solution\r\n\r\nFirst let's add an `ogimage` property in the top section (frontmatter) of one of the blog posts.\r\n\r\n```diff\r\n---\r\n title: Hello!\r\n date: '2018-12-01'\r\n+ogimage: './opengraph-default.png'\r\n---\r\n```\r\n\u003cbr/\u003e\r\n\r\nAfter restarting `gatsby deveop`, we now can add `ogimage` to the GraphQL query in **src/templates/blog-post.js**.\r\n\r\n```diff\r\n markdownRemark(fields: { slug: { eq: $slug } }) {\r\n   id\r\n   excerpt(pruneLength: 160)\r\n   html\r\n   frontmatter {\r\n     title\r\n     date(formatString: \"MMMM DD, YYYY\")\r\n+    ogimage { \r\n+      childImageSharp {\r\n+        fixed {\r\n+          src\r\n+        }\r\n+      }\r\n+    }\r\n   }\r\n }\r\n```\r\n\u003cbr/\u003e\r\n\r\nThe next step is obtaining a file path for the `ogimage` property in a blog post, and then passing it to the `SEO` component. Still in **src/templates/blog-post.js**:\r\n\r\n```diff\r\n class BlogPostTemplate extends React.Component {\r\n   render() {\r\n     const post = this.props.data.markdownRemark\r\n     const siteTitle = this.props.data.site.siteMetadata.title\r\n     const { previous, next } = this.props.pageContext\r\n+    const { ogimage } = post.frontmatter\r\n+    const ogImagePath = ogimage \u0026\u0026 ogimage.childImageSharp.fixed.src\r\n\r\n    return (\r\n      \u003cLayout location={this.props.location} title={siteTitle}\u003e\r\n        \u003cSEO\r\n          title={post.frontmatter.title}\r\n          description={post.excerpt}\r\n+          image={ogImagePath}\r\n        /\u003e\r\n\r\n```\r\n\r\n\u003cbr/\u003e\r\n\r\nThe `SEO` component (in **src/components/seo.js**) now needs to accept an `image` prop.\r\n\r\n```diff\r\n- function SEO({ description, lang, meta, keywords, title }) {\r\n+ function SEO({ description, lang, meta, keywords, title, image }) {  \r\n```\r\n\r\n\u003cbr/\u003e\r\n\r\nIf the `image` prop is undefined `SEO` will use a default value, which we need to import as a static image:\r\n\r\n```diff\r\n+ import defaultOpenGraphImage from '../../content/assets/opengraph-default.png'\r\n```\r\n\r\n...and then we use that as a fallback value.\r\n\r\n```diff\r\n \u003cStaticQuery\r\n   query={detailsQuery}\r\n   render={data =\u003e {\r\n     const metaDescription =\r\n       description || data.site.siteMetadata.description\r\n+    const ogImageUrl = \r\n+      data.site.siteMetadata.siteUrl +\r\n+      ( image || defaultOpenGraphImage )\r\n     return (\r\n       \u003cHelmet\r\n```\r\n\r\nThe `data.site.siteMetadata.siteUrl` expression above is needed to prefix the file path with the website's URL, but it will be undefined until we add `siteUrl` to the GraphQL query at the bottom of **seo.js**:\r\n\r\n```diff\r\nconst detailsQuery = graphql`\r\n  query DefaultSEOQuery {\r\n    site {\r\n      siteMetadata {\r\n         title\r\n         description\r\n         author\r\n+        siteUrl\r\n      }\r\n    }\r\n  }\r\n`\r\n```\r\n\r\nNow we can use `ogImageUrl` in the metadata:\r\n\r\n```diff\r\n  {\r\n    property: `og:title`,\r\n    content: title,\r\n  },\r\n  {\r\n    property: `og:description`,\r\n    content: metaDescription,\r\n  },\r\n+ {\r\n+   property: `og:image`,\r\n+   content: ogImageUrl,\r\n+ },\r\n+ {\r\n+   property: `twitter:image`,\r\n+   content: ogImageUrl,\r\n+ },\r\n+ {\r\n+   property: `image`,\r\n+   content: ogImageUrl,\r\n+ },\r\n```\r\n\r\nAnd that's it!\r\n\r\nWe added a property to the **frontmatter** of blog posts. We then modified the GraphQL query in **blog-post.js** to read the property and passed it to the SEO component in **seo.js**. The SEO uses an imported image as fallback and then it renders the necessary meta tags using the post's image or the fallback one.\r\n\r\nYou can see a Pull Request with all the changes I did for my blog: https://github.com/JulianG/juliang-blog/pull/3/files\r\n\r\n",
    "positive_reactions_count": 5,
    "cover_image": null,
    "tag_list": [
      "gatsby",
      "blog",
      "opengraph",
      "social"
    ],
    "canonical_url": "https://juliangaramendy.dev/custom-open-graph-images-in-gatsby-blog/",
    "user": {
      "name": "Julian Garamendy",
      "username": "juliang",
      "twitter_username": "JulianGWeb",
      "github_username": "JulianG",
      "website_url": "https://juliangaramendy.dev",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--vpUs0-v2--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--loOmt1W---/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/141721/8a8f732e-6202-4548-b6a8-d196181daf55.jpeg"
    }
  }
]